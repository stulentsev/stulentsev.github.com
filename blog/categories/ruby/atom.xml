<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2013-05-27T14:04:51+04:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Sidekiq with redis_failover gem]]></title>
    <link href="http://tech.tulentsev.com/2012/12/using-sidekiq-with-redis-failover-gem/"/>
    <updated>2012-12-15T18:23:00+04:00</updated>
    <id>http://tech.tulentsev.com/2012/12/using-sidekiq-with-redis-failover-gem</id>
    <content type="html"><![CDATA[<p><a href="http://mperham.github.com/sidekiq/">Sidekiq</a> works pretty well with standard redis client. This is an example of configuring it (<a href="https://github.com/mperham/sidekiq/wiki/Advanced-Options">from official wiki</a>):</p>

<p>``` ruby
Sidekiq.configure_server do |config|
  config.redis = { :url => 'redis://redis.example.com:7372/12', :namespace => 'mynamespace' }
end</p>

<h1>When in Unicorn, this block needs to go in unicorn's <code>after_fork</code> callback:</h1>

<p>Sidekiq.configure_client do |config|
  config.redis = { :url => 'redis://redis.example.com:7372/12', :namespace => 'mynamespace' }
end
```</p>

<p>But, what if you need a special redis client that can't be initialized with redis URL? No worries. Setter for <code>Sidekiq#redis</code> also accepts a <a href="https://github.com/mperham/connection_pool">ConnectionPool</a>. Here we have full control over how we initialize our redis client. Here's how you may initialize Sidekiq with a bunch of <a href="https://github.com/ryanlecompte/redis_failover">RedisFailover</a> clients:</p>

<p>``` ruby
Sidekiq.configure_server do |config|
  pool = ConnectionPool.new(:size => 10, :timeout => 3) do</p>

<pre><code>zkservers = 'localhost:2181,localhost:2182,localhost:2183'
RedisFailover::Client.new namespace: 'my_service', zkservers: zkservers
</code></pre>

<p>  end</p>

<p>  config.redis = pool
end</p>

<h1>do the same in Sidekiq.configure_client</h1>

<p>```</p>

<p>You can even read Sidekiq's <code>concurrency</code> setting and pass it to the connection pool initializer. Now your sidekiq farm doesn't care about redis crashes :)</p>

<p>Happy sidekiqing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object extensions and method lookups in Ruby]]></title>
    <link href="http://tech.tulentsev.com/2012/10/object-extensions-and-method-lookups-in-ruby/"/>
    <updated>2012-10-21T16:30:00+04:00</updated>
    <id>http://tech.tulentsev.com/2012/10/object-extensions-and-method-lookups-in-ruby</id>
    <content type="html"><![CDATA[<p>Method lookup is an interesting topic in Ruby. For example, exactly what happens that
produces this output from this code?</p>

<p>``` ruby
module Foo
  def hello</p>

<pre><code>super if defined? super
puts "foo"
</code></pre>

<p>  end
end</p>

<p>class Bar
  include Foo</p>

<p>  def hello</p>

<pre><code>super if defined? super
puts 'bar'
</code></pre>

<p>  end</p>

<p>end</p>

<p>bar = Bar.new
bar.hello</p>

<h1>>> foo</h1>

<h1>>> bar</h1>

<p>```</p>

<p>The algorithm for method lookups can be summarized in one sentence: "one step to the right,
then up". This is referring a specific visualization of objects and classes relationships,
where we place object's class to the right from the object, and place ancestor of a class
above it.</p>

<!-- more -->


<p><img src="/images/uploads/2012/10/lookup1.png"></p>

<p>It's important to understand that instances in ruby do not hold methods, only classes do.
At the same time we're able to enhance <strong>specific instances</strong> with additional methods, that
other instances of the same class will not have. Look:</p>

<p>``` ruby
module Foo
  def hello</p>

<pre><code>super if defined? super
"foo"
</code></pre>

<p>  end
end</p>

<p>class Bar
end</p>

<p>bar1 = Bar.new
bar1.extend Foo</p>

<p>bar2 = Bar.new</p>

<p>bar1.ancestors #
bar1.hello # => "foo"
bar2.hello # ~> -:17:in <code>&lt;main&gt;': undefined method</code>hello' for #&lt;Bar:0x007f858210a1d0> (NoMethodError)
```</p>

<p>Here <code>bar2</code> instance does not have a <code>hello</code> method, while <code>bar1</code> does have it. This means
that <code>hello</code> method can't be in <code>bar1</code> instance itself (remember, instances don't contain
methods), but it also can't be in <code>Bar</code> class, because then <code>bar2</code> would also have it. So,
where is that method located?</p>

<p>Well, there is a special hidden class for every object <em>instance</em> in ruby. This dynamic
class is where all those per-instance methods go. You won't be able to see it in the
ancestors chain, ruby hides it from you. But it's there (well, technically speaking, it <em>appears</em> there when you define your first per-instance method). So, in this case the lookup goes
like this:</p>

<p><img src="/images/uploads/2012/10/lookup2.png"></p>

<p>But what happens if <code>Bar</code> also defines a <code>hello</code> method? Which gets found and executed first?
Can you tell by looking on the pictures above?</p>

<p>``` ruby
module Foo
  def hello</p>

<pre><code>super if defined? super
puts "foo"
</code></pre>

<p>  end
end</p>

<p>class Bar
  def hello</p>

<pre><code>super if defined? super
puts 'bar'
</code></pre>

<p>  end
end</p>

<p>bar1 = Bar.new
bar1.extend Foo</p>

<p>bar1.hello
```</p>

<p>That's right it will print "bar", then "foo". Why? Because <code>Foo#hello</code> will be injected
<em>before</em> <code>Bar#hello</code> in the ancestors chain. It will go into that dynamic unique class
(which is called <em>eigenclass</em>, by the way). Here's the lookup flow:</p>

<p><img src="/images/uploads/2012/10/lookup3.png"></p>

<p>Method from <code>Foo</code> is found first and it calls super, which is the version in <code>Bar</code> class.
This version also tries to call <code>super</code> (there isn't one), then prints "bar" and returns
control to <code>Foo#hello</code> which prints "foo".</p>

<p>Now you see, it's a simple algorithm. But it can be really puzzling if you don't know about
eigenclasses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby gem for MurmurHash 3]]></title>
    <link href="http://tech.tulentsev.com/2012/10/ruby-gem-for-murmurhash-3/"/>
    <updated>2012-10-16T20:44:00+04:00</updated>
    <id>http://tech.tulentsev.com/2012/10/ruby-gem-for-murmurhash-3</id>
    <content type="html"><![CDATA[<p>Still driven by <a href="http://tech.tulentsev.com/2012/10/probabilistic-sets-in-redis/">that post</a>,
I decided to do something about it. So I went and tried to read the original paper. It was
mind blowing. Not because it was great (I am sure it is), but because it's been a while
since I had to read some serious math.</p>

<p>Then I came across this article, which could also be named "HyperLogLog for dummies":
<a href="http://metamarkets.com/2012/fast-cheap-and-98-right-cardinality-estimation-for-big-data/">Fast, Cheap, and 98% Right: Cardinality Estimation for Big Data</a>.
It was much more readable. From it I learned about Murmur hash and was surprised that
there's no ruby gem for this. Fortunately, <a href="http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp">C++ source code</a>
was available, so I decided to wrap this as a gem.</p>

<p>It went much smoother than I anticipated and I had working version within 3 or 4 hours.
I didn't have experience with native extensions before, someone experienced probably could
have done it in 5 minutes, but still I consider this as an achievement! :)</p>

<p>So, only when I tried to push the gem to <a href="http://rubygems.org">RubyGems</a>, I discovered that there IS
a gem with this name: <a href="http://rubygems.org/gems/murmurhash3">murmurhash3</a>. The public API
is too cumbersome if you ask me, but it works and probably has less bugs than my version.</p>

<p>Here's how you use it:</p>

<p>``` ruby
require 'murmurhash3'</p>

<p>s = "Hello, world!"</p>

<p>ints = MurmurHash3::Native128.murmur3_128_str_hash s</p>

<pre><code> #    produce a 128 bits of hash, in the form of 4 32-bit integers
</code></pre>

<p>ints # => [3537266143, 4048629201, 2834548068, 741500496]
```</p>

<p>You can turn this array of integers into a hex string like this:</p>

<p><code>ruby
ints.pack('L*').unpack('H*').first # =&gt; "df65d6d2d12d51f164c5f3a85066322c"
</code></p>

<p>If you know a better/faster/more idiomatic way, please let me know :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define module programmatically]]></title>
    <link href="http://tech.tulentsev.com/2012/04/define-module-programmatically/"/>
    <updated>2012-04-02T03:14:50+04:00</updated>
    <id>http://tech.tulentsev.com/2012/04/define-module-programmatically</id>
    <content type="html"><![CDATA[<p><code>ruby
module Foo
end
</code></p>

<p>Given a module <code>Foo</code>, how do you define a nested module <code>Bar</code>?</p>

<p>``` ruby
module Foo</p>

<pre><code>module Bar
end
</code></pre>

<p>end
```</p>

<p>There's a number of ways. First, most obvious one is to eval a string.</p>

<p>``` ruby
module Foo
end</p>

<p>name = 'Bar'</p>

<p>Foo.class_eval &lt;&lt;RUBY
  module #{name}
  end
RUBY</p>

<p>Foo::Bar # => Foo::Bar
```</p>

<p>While this certainly works and gets job done, it has some flaws. First, it's a string, so some editors and IDEs will get confused and lose coloring/completion. Second, there's no validation on module name. In best case, you'll get compiler error. In worst case, you'll get hard to track bugs.</p>

<p>``` ruby
module Foo
end</p>

<p>bar = Module.new
Foo.const_set(:Bar, bar)</p>

<p>Foo::Bar # => Foo::Bar
```</p>

<p>This one is better. You clearly state that you're going to set a constant, and module name is pretty restricted.</p>

<p>Are there other ways to do this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: for..in loop]]></title>
    <link href="http://tech.tulentsev.com/2012/03/ruby-forin-loop/"/>
    <updated>2012-03-31T11:19:36+04:00</updated>
    <id>http://tech.tulentsev.com/2012/03/ruby-forin-loop</id>
    <content type="html"><![CDATA[<p>You live to learn every day. Today I discovered <code>for..in</code> loop in ruby. When I saw it in a question on <a href="http://stackoverflow.com">stackoverflow</a>, I was like "Hey, dude, this is ruby, not javascript!" in my head. But, apparently, it's legal ruby :)</p>

<p>``` ruby
arr = [1, 2, 3]</p>

<p>for a in arr
  puts "element #{a}"
end</p>

<h1>=> element 1</h1>

<h1>=> element 2</h1>

<h1>=> element 3</h1>

<p>```</p>

<p>You can put ranges in there also.</p>

<p><code>ruby
for a in (1..10)
  puts a
end
</code></p>

<p>I usually write such loops with <code>.each</code>, but good to know there's another way.</p>
]]></content>
  </entry>
  
</feed>
