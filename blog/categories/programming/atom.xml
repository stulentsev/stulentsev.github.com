<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2014-02-03T09:44:37+02:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It is all relative]]></title>
    <link href="http://tech.tulentsev.com/2012/09/it-is-all-relative/"/>
    <updated>2012-09-03T15:50:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/09/it-is-all-relative</id>
    <content type="html"><![CDATA[<p>I remember reading my first book on Javascript. It was covering Javascript 1.0 and included
changes in Javascript 1.1 I thought then: "Wow, that's an advanced stuff!" If I was told
that things like jQuery or Node.js will someday exist, I wouldn't believe that. And if
tomorrow I fall into a time vortex and travel to 90s, I will probably kill myself. It's like
the stone age of technology. It's better to get to a real stone age. At least, the
air is still clean. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can I haz a gem?]]></title>
    <link href="http://tech.tulentsev.com/2012/04/can-i-haz-a-gem/"/>
    <updated>2012-04-05T10:23:48+03:00</updated>
    <id>http://tech.tulentsev.com/2012/04/can-i-haz-a-gem</id>
    <content type="html"><![CDATA[<p>Back when I was just starting to program, we used to joke about Delphi coders.</p>

<blockquote><p>A Delphi coder wants to build a tool for cheating in games (read/write memory of another process). So, before writing a single line of code he goes to a forum and asks: "Are there ready-made components for building game cheating tools?"</p></blockquote>

<p>I guess, this happens to every widely adopted technology that has plugins/libraries. <a href="http://stackoverflow.com/questions/10022215/building-an-auction-with-ruby-on-rails">An example</a>.</p>

<p><img src="http://tech.tulentsev.com/images/uploads/2012/04/screenshot_2012_04_05_071714.png" alt="Screenshot 2012 04 05 07.17.14" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: for..in loop]]></title>
    <link href="http://tech.tulentsev.com/2012/03/ruby-forin-loop/"/>
    <updated>2012-03-31T10:19:36+03:00</updated>
    <id>http://tech.tulentsev.com/2012/03/ruby-forin-loop</id>
    <content type="html"><![CDATA[<p>You live to learn every day. Today I discovered <code>for..in</code> loop in ruby. When I saw it in a question on <a href="http://stackoverflow.com">stackoverflow</a>, I was like "Hey, dude, this is ruby, not javascript!" in my head. But, apparently, it's legal ruby :)</p>

<p>``` ruby
arr = [1, 2, 3]</p>

<p>for a in arr
  puts "element #{a}"
end</p>

<h1>=> element 1</h1>

<h1>=> element 2</h1>

<h1>=> element 3</h1>

<p>```</p>

<p>You can put ranges in there also.</p>

<p><code>ruby
for a in (1..10)
  puts a
end
</code></p>

<p>I usually write such loops with <code>.each</code>, but good to know there's another way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with classes: find which class is the biggest :)]]></title>
    <link href="http://tech.tulentsev.com/2012/03/fun-with-classes-find-which-class-is-the-biggest/"/>
    <updated>2012-03-30T04:13:27+03:00</updated>
    <id>http://tech.tulentsev.com/2012/03/fun-with-classes-find-which-class-is-the-biggest</id>
    <content type="html"><![CDATA[<p>Did you know that in Ruby you can compare classes with 'less-than' and 'greater-than' operators? I did not (until today). Observe:</p>

<p>``` ruby
class A
end</p>

<p>class B &lt; A
end</p>

<p>class C &lt; A
end</p>

<p>class D &lt; B
end</p>

<p>A &lt; B # false
A > B # true
D &lt; A # true
D &lt; B # true
D &lt; C # nil
C > D # nil
```</p>

<p>This operator returns a boolean value (as one would expect), so you can write code like this:</p>

<p><code>ruby
puts "B inherits from A" if B &lt; A
</code></p>

<p>Note how it resembles the class definition syntax. I think that this is simply brilliant (not very intuitive, though. I wouldn't think of writing this code).</p>

<p>Now that we know this fact, let's try to sort the classes :)</p>

<p>``` ruby
class A
end</p>

<p>class B &lt; A
end</p>

<p>class C &lt; A
end</p>

<p>class D &lt; B
end</p>

<p>class E &lt; A
end</p>

<p>class Class
  # we need to define the spaceship operator for classes, since it's not defined yet.
  def &lt;=> other</p>

<pre><code>return 0 if self == other
return -1 if self &lt; other
1
</code></pre>

<p>  end
end</p>

<p>klasses = [A, B, C, D, E]</p>

<p>klasses.sort # [E, C, D, B, A]
```</p>

<p>Now this class hierarchy is sorted, with children first and parents last. Homework: come up with a practical application for this :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying with Sinatra + Capistrano + Unicorn]]></title>
    <link href="http://tech.tulentsev.com/2012/03/deploying-with-sinatra-capistrano-unicorn/"/>
    <updated>2012-03-09T18:02:46+02:00</updated>
    <id>http://tech.tulentsev.com/2012/03/deploying-with-sinatra-capistrano-unicorn</id>
    <content type="html"><![CDATA[<p>Today we'll be deploying a simple Sinatra app with Capistrano, using Unicorn as our web server. First things first: let's think of a stupid name for this project. What about "sincapun"? Any objections? Good, let's proceed.</p>

<p><code>bash
mkdir sincapun
cd sincapun
</code></p>

<p>Minimal runnable version:</p>

<p>``` ruby</p>

<h1>Gemfile</h1>

<p>gem 'sinatra'</p>

<h1>sincapun.rb</h1>

<p>require 'sinatra'</p>

<p>get '/' do</p>

<pre><code>"Hello world"
</code></pre>

<p>end
```</p>

<p>Let's see if we can run it...</p>

<p><code>bash
$ bundle exec ruby sincapun.rb
[2012-03-09 16:04:17] INFO  WEBrick 1.3.1
[2012-03-09 16:04:17] INFO  ruby 1.9.3 (2012-02-16) [x86_64-darwin11.3.0]
== Sinatra/1.3.2 has taken the stage on 4567 for development with backup from WEBrick
[2012-03-09 16:04:17] INFO  WEBrick::HTTPServer#start: pid=14871 port=4567
</code></p>

<p>So far, so good. Now let's convert it to modular app and create a proper rackup file.</p>

<p>``` ruby</p>

<h1>sincapun.rb</h1>

<p>require 'sinatra'</p>

<p>class Sincapun &lt; Sinatra::Base
  get '/' do</p>

<pre><code>"Hello world"
</code></pre>

<p>  end
end</p>

<h1>config.ru</h1>

<p>require './sincapun'
run Sincapun
```</p>

<p>At this point our app is runnable by every Rack-compatible server (thin, unicorn, ...). Let's add some Capistrano to it.</p>

<p>``` ruby</p>

<h1>Gemfile</h1>

<p>source :rubygems</p>

<p>gem 'sinatra'
gem 'unicorn'
gem 'capistrano'
```</p>

<p><code>`` bash
$ bundle install
Using highline (1.6.11)
Using net-ssh (2.3.0)
Using net-scp (1.0.4)
Using net-sftp (2.0.5)
Using net-ssh-gateway (1.1.0)
Using capistrano (2.11.2)
Using kgio (2.7.2)
Using rack (1.4.1)
Using rack-protection (1.2.0)
Using raindrops (0.8.0)
Using tilt (1.3.3)
Using sinatra (1.3.2)
Using unicorn (4.2.0)
Using bundler (1.0.22)
Your bundle is complete! Use</code>bundle show [gemname]` to see where a bundled gem is installed.</p>

<p>$ capify .
[add] writing './Capfile'
[add] making directory './config'
[add] writing './config/deploy.rb'
[done] capified!
```</p>

<p>Let's improve our capistrano config a little bit.</p>

<p>``` ruby</p>

<h1>config/deploy.rb</h1>

<h1>We're using RVM on a server, need this.</h1>

<p>$:.unshift(File.expand_path('./lib', ENV['rvm_path']))
require 'rvm/capistrano'
set :rvm_ruby_string, '1.9.3'
set :rvm_type, :user</p>

<h1>Bundler tasks</h1>

<p>require 'bundler/capistrano'</p>

<p>set :application, "sincapun"
set :repository,  "git@github.com:stulentsev/sincapun.git"</p>

<p>set :scm, :git</p>

<h1>do not use sudo</h1>

<p>set :use_sudo, false
set(:run_method) { use_sudo ? :sudo : :run }</p>

<h1>This is needed to correctly handle sudo password prompt</h1>

<p>default_run_options[:pty] = true</p>

<p>set :user, "myname"
set :group, user
set :runner, user</p>

<p>set :host, "#{user}@myhost" # We need to be able to SSH to that box as this user.
role :web, host
role :app, host</p>

<p>set :rails_env, :production</p>

<h1>Where will it be located on a server?</h1>

<p>set :deploy_to, "/srv/#{application}"
set :unicorn_conf, "#{deploy_to}/current/config/unicorn.rb"
set :unicorn_pid, "#{deploy_to}/shared/pids/unicorn.pid"</p>

<h1>Unicorn control tasks</h1>

<p>namespace :deploy do
  task :restart do</p>

<pre><code>run "if [ -f #{unicorn_pid} ]; then kill -USR2 `cat #{unicorn_pid}`; else cd #{deploy_to}/current &amp;&amp; bundle exec unicorn -c #{unicorn_conf} -E #{rails_env} -D; fi"
</code></pre>

<p>  end
  task :start do</p>

<pre><code>run "cd #{deploy_to}/current &amp;&amp; bundle exec unicorn -c #{unicorn_conf} -E #{rails_env} -D"
</code></pre>

<p>  end
  task :stop do</p>

<pre><code>run "if [ -f #{unicorn_pid} ]; then kill -QUIT `cat #{unicorn_pid}`; fi"
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>We need a config file for Unicorn. Here is what it may look like:</p>

<p>``` ruby</p>

<h1>define paths and filenames</h1>

<p>deploy_to = "/srv/sincapun"
rails_root = "#{deploy_to}/current"
pid_file = "#{deploy_to}/shared/pids/unicorn.pid"
socket_file= "#{deploy_to}/shared/unicorn.sock"
log_file = "#{rails_root}/log/unicorn.log"
err_log = "#{rails_root}/log/unicorn_error.log"
old_pid = pid_file + '.oldbin'</p>

<p>timeout 30
worker_processes 2 # increase or decrease
listen socket_file, :backlog => 1024</p>

<p>pid pid_file
stderr_path err_log
stdout_path log_file</p>

<h1>make forks faster</h1>

<p>preload_app true</p>

<h1>make sure that Bundler finds the Gemfile</h1>

<p>before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', File.dirname(<strong>FILE</strong>))
end</p>

<p>before_fork do |server, worker|
  defined?(ActiveRecord::Base) and</p>

<pre><code>  ActiveRecord::Base.connection.disconnect!
</code></pre>

<p>  # zero downtime deploy magic:
  # if unicorn is already running, ask it to start a new process and quit.
  if File.exists?(old_pid) &amp;&amp; server.pid != old_pid</p>

<pre><code>begin
  Process.kill("QUIT", File.read(old_pid).to_i)
rescue Errno::ENOENT, Errno::ESRCH
  # someone else did our job for us
end
</code></pre>

<p>  end
end</p>

<p>after_fork do |server, worker|</p>

<p>  # re-establish activerecord connections.
  defined?(ActiveRecord::Base) and</p>

<pre><code>  ActiveRecord::Base.establish_connection
</code></pre>

<p>end
```</p>

<p>That should do it. Now you can deploy your app, assuming that you have <a href="http://beginrescueend.com/">RVM</a> on the server, you can SSH into it and write to /srv directory.</p>

<p><code>bash
cap deploy:setup
cap deploy
</code></p>

<p>Deploy should spit a lot of text into the console, and there should be no errors. Verify that our unicorns are launched correctly by logging into the server and running this:</p>

<p><code>bash
$ ps aux | grep sincapun
myuser   24851  2.0  0.1  88480 21024 ?        Sl   11:42   0:00 unicorn master -c /srv/sincapun/current/config/unicorn.rb -E production -D                                         
myuser   24854  0.1  0.1  88480 19732 ?        Sl   11:42   0:00 unicorn worker[0] -c /srv/sincapun/current/config/unicorn.rb -E production -D                                      
myuser   24857  0.1  0.1  88480 19732 ?        Sl   11:42   0:00 unicorn worker[1] -c /srv/sincapun/current/config/unicorn.rb -E production -D                                      
</code></p>

<p>To access these unicorns from the internet, you need to put a reverse proxy in front of them. But that is another story.</p>

<p>You can get a full copy of this code <a href="https://github.com/stulentsev/sincapun">from Github repo</a>.</p>
]]></content>
  </entry>
  
</feed>
