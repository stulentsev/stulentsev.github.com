<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deployment | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/deployment/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2013-11-04T13:38:10+02:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Move Capistrano's log directory]]></title>
    <link href="http://tech.tulentsev.com/2013/03/move-capistranos-log-directory/"/>
    <updated>2013-03-11T14:34:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/03/move-capistranos-log-directory</id>
    <content type="html"><![CDATA[<p>So you want to move your log directory? To a separate volume, maybe? But you are afraid that it will break too many things, like all those libraries with <code>#{rails_root}/log</code> paths hardcoded in them? Fear not, there's a simple workaround.</p>

<p>As you probably know, capistrano aliases your rails log dir to a shared dir outside of app folder.</p>

<p><code>
ln -s /deploy_path/shared/log /deploy_path/current/log
</code></p>

<p>This means that, in fact, all your logs turn up at <code>/deploy_path/shared/log/</code>. Now all we need is to symlink that dir as well!</p>

<p>``` bash
sudo mkdir /var/log/yourapp</p>

<h1>make it writable to the app</h1>

<p>sudo chown -R youruser:yourgroup /var/log/yourapp/</p>

<h1>deal with existing log dir (I back it up, but you can remove it, or copy the files to</h1>

<h1>the new location)</h1>

<p>mv /deploy_path/shared/log /deploy_path/shared/log_
ln -s /var/log/yourapp /deploy_path/shared/log
```</p>

<p>Hope this helps :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cap deploy from an arbitrary branch]]></title>
    <link href="http://tech.tulentsev.com/2013/02/cap-deploy-from-an-arbitrary-branch/"/>
    <updated>2013-02-22T12:34:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/02/cap-deploy-from-an-arbitrary-branch</id>
    <content type="html"><![CDATA[<p>As you know, capistrano can deploy your app from a specific branch in the repo. You just have to specify it</p>

<p><code>ruby
set :branch, 'develop'
</code></p>

<p>If you develop in a single branch, that should do it for you. All commits go to one branch and all deploys are likely served by the same branch. This is a simple model, good enough for small projects.</p>

<p>However, if you adopt <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>, it encourages you (not to say "forces") to have separate branch for every feature, release or hotfix that you're working on. And, naturally, you want to deploy to dev/staging server right from a feature branch, not having to merge it first to develop/master. This is trivial to accomplish, just change the branch name:</p>

<p><code>ruby
set :branch, 'feature/my-test-feature'
</code></p>

<p>Now you have a pending file change. What do you do with it? Commit to source control? That increases file churn rate for absolutely no reason. <code>git checkout</code> that file? This is an extra action, of which you will be tired quite soon (not to mention chance to accidentally commit the file).</p>

<p>Solution? Externalize the setting. When deploying, look in the environment for a branch to use and fallback to default name.</p>

<p><code>ruby
set :branch, ENV['BRANCH'] || "develop"
</code></p>

<p>Then you do this</p>

<p><code>bash
BRANCH=feature/my-test-feature cap deploy
</code></p>

<p>Or, if you have multistage enabled</p>

<p><code>bash
BRANCH=feature/my-test-feature cap staging deploy
</code></p>

<p>Of course, this requires a bit more typing on each deploy, but at the same time it decreases chances of deploying from a wrong branch.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
</feed>
