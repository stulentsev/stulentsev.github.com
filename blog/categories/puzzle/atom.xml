<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puzzle | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/puzzle/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2016-08-26T15:02:42+03:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kata: Convert numbers to Roman numerals]]></title>
    <link href="http://tech.tulentsev.com/2014/02/kata-convert-numbers-to-roman-numerals/"/>
    <updated>2014-02-08T10:24:00+04:00</updated>
    <id>http://tech.tulentsev.com/2014/02/kata-convert-numbers-to-roman-numerals</id>
    <content type="html"><![CDATA[<p>Here is an interesting problem: write a program that converts numbers into <a href="http://en.wikipedia.org/wiki/Roman_numerals">Roman numerals</a>. Roman didn't use Arabic numbers. Instead they used symbols of Latin alphabet that represented different values. It's a simple system. "I" stands for 1, "V" stands for 5, "X" for 10 and so on. To represent 2 you have to use "II" (1 + 1), to represent 7 you use "VII" (5 + 1 + 1). Simple, right? Well, no. Here's a twist.</p>

<pre>
* 4 is "IV" (not "IIII")
* 9 is "IX" (not "VIIII")
* 40 is "XL" (not "XXXX")
* 49 is "XLIX" (not "XXXXVIIII")
</pre>


<p>Weird, huh? Maybe they didn't like 4 identical symbols in a row, who knows. Anyway, how can we solve this?</p>

<p>After trying out several "smart" solutions and failing, I've come up with this simple solution: store these special cases along with normal ones and keep subtracting from the number until it's zero.</p>

<p>``` ruby
def romanize(number)
  reductions = {</p>

<pre><code>1000 =&gt; 'M',
900 =&gt; 'CM',

500 =&gt; 'D',
400 =&gt; 'CD',

100 =&gt; 'C',
90 =&gt; 'XC',

50 =&gt; 'L',
40 =&gt; 'XL',

10 =&gt; 'X',
9 =&gt; 'IX',

5 =&gt; 'V',
4 =&gt; 'IV',

1 =&gt; 'I',
</code></pre>

<p>  }</p>

<p>  result = ''</p>

<p>  while number > 0</p>

<pre><code>reductions.each do |n, subst|
  if number / n &gt;= 1 # if number contains at least one of n
    result &lt;&lt; subst  # push corresponding symbol to result
    number -= n      
    break            # break from each and start it anew 
                     # so that the largest numbers are checked first again.
  end
end
</code></pre>

<p>  end</p>

<p>  result
end
```</p>

<p>A test:</p>

<p>``` ruby
test_mapping = {
  1 => 'I',
  2 => 'II',
  3 => 'III',
  4 => 'IV',
  5 => 'V',
  6 => 'VI',
  7 => 'VII',
  8 => 'VIII',
  9 => 'IX',
  10 => 'X',
  11 => 'XI',
  12 => 'XII',
  13 => 'XIII',
  14 => 'XIV',
  15 => 'XV',
  19 => 'XIX',
  22 => 'XXII',
  29 => 'XXIX',
  30 => 'XXX',
  40 => 'XL',
  49 => 'XLIX',
  99 => 'XCIX',
  950 => 'CML',
  2014 => 'MMXIV',
}</p>

<p>test_mapping.each do |k, v|
  res = romanize(k)
  sign = res == v ? '.' : 'F'</p>

<p>  puts "#{sign} #{k} => #{res.inspect}"
end
```</p>

<p>This simple problem took me a little bit over 2 hours to come up with this (simple) solution. Too bad, that often we, programmers, don't have time to look for simple solutions and we go for the easiest one.</p>

<p>Hope this helps someone.</p>
]]></content>
  </entry>
  
</feed>
