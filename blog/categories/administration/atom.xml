<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: administration | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/administration/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2013-10-30T10:55:16+02:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating from Wordpress to Octopress - 301 redirects]]></title>
    <link href="http://tech.tulentsev.com/2012/09/migrating-from-wordpress-to-octopress-301-redirects/"/>
    <updated>2012-09-03T17:00:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/09/migrating-from-wordpress-to-octopress-301-redirects</id>
    <content type="html"><![CDATA[<p>Okay, I probably can't avoid writing the obligatory migration article :) If in the
migration process you decided to also change the domain name, then this article is for you.
If your domain name is the same, only the hosting is different, then you should set up a
<a href="http://octopress.org/docs/deploying/github/">CNAME</a>. If you wiped Wordpress and installed
Octopress in its stead, then this article is useless to you, move on.</p>

<!-- more -->


<p>We want to set up a good 301 redirect, such that will take links to old blog posts and
redirect them to corresponding posts on the new domain. Redirection is good. It keeps
search visitors happy (bots or humans).</p>

<p>We can implement it using <code>mod_rewrite</code>. Wordpress already requires <code>mod_rewrite</code>, so
we can count on its presence. Navigate to blog's root and look for file named <code>.htaccess</code>.
It should have this (or similar) content:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>BEGIN WordPress&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;IfModule mod_rewrite.c>
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteBase /blog/
</span><span class='line'>RewriteRule ^index.php$ - [L]
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>RewriteRule . /blog/index.php [L]
</span><span class='line'>&lt;/IfModule>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>END WordPress&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We don't need all this, because we won't be using Wordpress anymore. Replace it with this
snippet</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mod_rewrite.c>
</span><span class='line'>Options +FollowSymlinks
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{HTTP_HOST} ^example.com [NC]
</span><span class='line'>RewriteRule ^(.*)$ http://blog.example2.com/$1 [L,R=301]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>RewriteCond %{HTTP_HOST} ^www.example.com [NC]
</span><span class='line'>RewriteRule ^(.*)$ http://blog.example2.com/$1 [L,R=301]
</span><span class='line'>&lt;/IfModule></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In short, these two rules take any URL from the old domain (with or without <code>www</code>) and
replace domain name to a new one.</p>

<p>If your octopress blog is functioning on the new domain, no more actions are required. It
should work already.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to dump your MongoDB database partially (only selected tables)]]></title>
    <link href="http://tech.tulentsev.com/2012/03/how-to-dump-your-mongodb-database-partially-only-selected-tables/"/>
    <updated>2012-03-21T17:15:22+02:00</updated>
    <id>http://tech.tulentsev.com/2012/03/how-to-dump-your-mongodb-database-partially-only-selected-tables</id>
    <content type="html"><![CDATA[<p>Let's say you want to dump your MongoDB database. There's a handy tool that does just that, <strong>mongodump</strong>.</p>

<p><code>bash
mongodump
</code></p>

<p>If executed without any arguments it will try to connect to <code>localhost:27017</code> and dump all databases. You can specify a single database that you're interested in and it will dump just this database.</p>

<p><code>bash
mongodump -d mydb
</code></p>

<p>But in some cases you don't want to dump the whole database. In my case, it's an analytics application and 99% of data is in raw event collections (<strong>events20120320</strong>, <strong>events20120321</strong>, ...). I am interested only in a small number of "important" collections. But <strong>mongodump</strong> doesn't provide us with an option to specify several collections. You can only dump one collection at a time. If you don't mind some typing, that's easy.</p>

<p><code>bash
mongodump -d mydb -c mycoll1
mongodump -d mydb -c mycoll2
mongodump -d mydb -c mycoll5
</code></p>

<p>But we're all programmers, so let's automate this stuff. I, personally, never used bash loops before, and it seems like a good use case for them. Let's do it.</p>

<p>``` bash
colls=( mycoll1 mycoll2 mycoll5 )</p>

<p>for c in ${colls[@]}
do
  mongodump -d mydb -c $c
done
```</p>

<p>First line defines a bash array literal. <strong>Don't use commas to delimit array elements</strong>, they'll become part of the element. The <strong>${colls[@]}</strong> string means "all array elements" and it can be used anywhere where a variable is expected. The rest is pretty straightforward, I think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to keep your system clock synchronized on Ubuntu?]]></title>
    <link href="http://tech.tulentsev.com/2012/03/how-to-keep-your-system-clock-synchronized-on-ubuntu/"/>
    <updated>2012-03-09T10:10:18+02:00</updated>
    <id>http://tech.tulentsev.com/2012/03/how-to-keep-your-system-clock-synchronized-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Your server's hardware clock isn't perfectly accurate. It may run faster or slower (in my experience it was always slower). So it is important to synchronize it every so often, or else you might encounter some unexpected bugs. There's a command in Ubuntu that synchronizes hardware clock against atomic clock servers. It's called ntpdate</p>

<p><code>bash
$ sudo ntpdate ntp.ubuntu.com
 9 Mar 03:59:12 ntpdate[7225]: step time server 91.189.94.4 offset 179.440440 sec
</code></p>

<p>This one was three minutes behind. Could be worse, though. So, now clock is more or less accurate. To keep it this way, let's add an hourly cron job. Create a file called 'ntpdate' (for example) at '/etc/cron.hourly' with this content:</p>

<p>``` bash</p>

<h1>! /bin/sh</h1>

<p>ntpdate ntp.ubuntu.com
```</p>

<p>We don't need sudo here, because these jobs are run with root privileges. Now make that file executable.</p>

<p><code>bash
sudo chmod +x /etc/cron.hourly/ntpdate
</code></p>

<p>We're all set now. Come back a few days later and verify that clock doesn't deviate as much anymore.</p>
]]></content>
  </entry>
  
</feed>
