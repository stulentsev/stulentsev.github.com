<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2016-08-26T14:34:26+03:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting humanized numbers in tablesorter.js]]></title>
    <link href="http://tech.tulentsev.com/2012/12/sorting-humanized-numbers-in-tablesorter-dot-js/"/>
    <updated>2012-12-23T17:48:00+04:00</updated>
    <id>http://tech.tulentsev.com/2012/12/sorting-humanized-numbers-in-tablesorter-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://tablesorter.com/docs/">Tablesorter</a> is a jQuery plugin for sorting tables. It appeared first in a couple of "X jquery table sorting plugins" blog posts, so I went with it when I needed to sort a table a couple of days ago.</p>

<p>It works pretty well out of the box and it even lets you customize some bits. One of those bits is column parser: if you have special data in a column, you need a special way to sort it.</p>

<p>Here's <a href="http://tablesorter.com/docs/example-parsers.html">an official example</a></p>

<p>``` javascript
// add parser through the tablesorter addParser method
$.tablesorter.addParser({</p>

<pre><code>// set a unique id 
id: 'grades', 
is: function(s) { 
    // return false so this parser is not auto detected 
    return false; 
}, 
format: function(s) { 
    // format your data for normalization 
    return s.toLowerCase().replace(/good/,2).replace(/medium/,1).replace(/bad/,0); 
}, 
// set type, either numeric or text 
type: 'numeric' 
</code></pre>

<p>});</p>

<p>$(function() {</p>

<pre><code>$("table").tablesorter({ 
    headers: { 
        6: { 
            sorter:'grades' 
        } 
    } 
}); 
</code></pre>

<p>});                <br/>
```</p>

<p>However, it leaves much to be desired. Like what to do when I want my parser to be auto-detected. Turns out that this <code>is</code> function is a predicate. It accepts a string and decides whether it can be handled by this parser. Then the <code>format</code> function will make conversion to a normalized textual/numeric form.</p>

<p>In my case I have a table with a lot of numbers. And those numbers are in humanized form. That is, instead of <code>121738</code> I output <code>121.74k</code>. This format is not properly sortable as either number or text, so I wrote a parser.</p>

<p>``` javascript
$.tablesorter.addParser({
  id: 'humannum',
  is: function(s) {</p>

<pre><code>return /^[\d\.]+[Mk]?$/.test(s);
</code></pre>

<p>  },
  format: function(s) {</p>

<pre><code>var is_m = s.indexOf('M') !== -1;
var is_k = s.indexOf('k') !== -1;
var fl = parseFloat(s);
var res = fl;
if (is_m) {
  res = fl * 1000000;
} else if (is_k) {
  res = fl * 1000;
}
return res.toString();
</code></pre>

<p>  },
  type: 'numeric'
});
```</p>

<p>It basically checks if a string consists of a number followed by an optional "M" or "k" and, if that's the case, converts it to a "full" number.</p>

<p>I wish this was in the official doc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It is all relative]]></title>
    <link href="http://tech.tulentsev.com/2012/09/it-is-all-relative/"/>
    <updated>2012-09-03T15:50:00+04:00</updated>
    <id>http://tech.tulentsev.com/2012/09/it-is-all-relative</id>
    <content type="html"><![CDATA[<p>I remember reading my first book on Javascript. It was covering Javascript 1.0 and included
changes in Javascript 1.1 I thought then: "Wow, that's an advanced stuff!" If I was told
that things like jQuery or Node.js will someday exist, I wouldn't believe that. And if
tomorrow I fall into a time vortex and travel to 90s, I will probably kill myself. It's like
the stone age of technology. It's better to get to a real stone age. At least, the
air is still clean. :)</p>
]]></content>
  </entry>
  
</feed>
