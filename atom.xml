<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rock, Paper, Software]]></title>
  <link href="http://stulentsev.github.com/atom.xml" rel="self"/>
  <link href="http://stulentsev.github.com/"/>
  <updated>2012-09-02T12:57:47+04:00</updated>
  <id>http://stulentsev.github.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[testing octopress]]></title>
    <link href="http://stulentsev.github.com/2012/09/testing-octopress/"/>
    <updated>2012-09-02T12:25:00+04:00</updated>
    <id>http://stulentsev.github.com/2012/09/testing-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can I haz a gem?]]></title>
    <link href="http://stulentsev.github.com/2012/04/can-i-haz-a-gem/"/>
    <updated>2012-04-05T11:23:48+04:00</updated>
    <id>http://stulentsev.github.com/2012/04/can-i-haz-a-gem</id>
    <content type="html"><![CDATA[<p>Back when I was just starting to program, we used to joke about Delphi coders.</p>

<blockquote><p>A Delphi coder wants to build a tool for cheating in games (read/write memory of another process). So, before writing a single line of code he goes to a forum and asks: &#8220;Are there ready-made components for building game cheating tools?&#8221;</p></blockquote>

<p>I guess, this happens to every widely adopted technology that has plugins/libraries. <a href="http://stackoverflow.com/questions/10022215/building-an-auction-with-ruby-on-rails">An example</a>.</p>

<p><img src="http://software.tulentsev.com/wp-content/uploads/2012/04/screenshot_2012_04_05_071714.png" alt="Screenshot 2012 04 05 07.17.14" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect to multiple MySQL servers]]></title>
    <link href="http://stulentsev.github.com/2012/04/connect-to-multiple-mysql-servers/"/>
    <updated>2012-04-05T11:02:36+04:00</updated>
    <id>http://stulentsev.github.com/2012/04/connect-to-multiple-mysql-servers</id>
    <content type="html"><![CDATA[<p>You know how everyone is obsessed these days with scalability? Well, I am too. There&#8217;s a project of mine where I need to connect to multiple MySQL servers, depending on the current client id. The simplest implementation looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">use_table_for_app</span> <span class="n">aid</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="n">get_connection_config</span> <span class="n">aid</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="n">config</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but it creates a new connection on every call. Let&#8217;s suppose, we&#8217;re processing a queue and we&#8217;re handling events from different apps (customers). The cost of setting up a connection can easily outweigh the actual work. We need to cache that somehow.</p>

<p>Now, <code>ActiveRecord::Base</code> has a method called <code>connection_config</code> that returns, well, configuration of current connection. We can compare that to what we have on hands and, if they match, do not reconnect. Here&#8217;s how our code looks like now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">use_table_for_app</span> <span class="n">aid</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="n">get_connection_config</span> <span class="n">aid</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">can_use_connection?</span><span class="p">(</span><span class="n">config</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">active?</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="n">config</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">can_use_connection?</span> <span class="n">config</span>
</span><span class='line'>  <span class="n">current_config</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection_config</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># current config can have more keys than our config (or vice versa), so simple hash comparison doesn&#39;t work.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># if even a single parameter is different - can&#39;t reuse this connection.</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">config</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="n">current_config</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>      <span class="c1"># TODO: log warning</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks almost good. Now let&#8217;s extract this to a module for ease of re-using. Here&#8217;s the final code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">SqlModelHelpers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span> <span class="n">klass</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">send</span> <span class="ss">:extend</span><span class="p">,</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setup_connection</span> <span class="n">aid</span>
</span><span class='line'>      <span class="c1"># TODO: do not reestablish good connections.</span>
</span><span class='line'>      <span class="c1"># 1. get config to connect</span>
</span><span class='line'>      <span class="c1"># 2. compare with current config (ActiveRecord::Base.connection_config)</span>
</span><span class='line'>      <span class="c1"># 3. if configs match and connection is open - do not establish_connection</span>
</span><span class='line'>      <span class="n">config</span> <span class="o">=</span> <span class="n">get_connection_config</span> <span class="n">aid</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">unless</span> <span class="n">can_use_connection?</span><span class="p">(</span><span class="n">config</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">active?</span>
</span><span class='line'>        <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="n">config</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_use_connection?</span> <span class="n">config</span>
</span><span class='line'>      <span class="n">current_config</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection_config</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">config</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="n">current_config</span><span class="o">[</span><span class="n">k</span><span class="o">]</span>
</span><span class='line'>          <span class="c1"># TODO: log warning</span>
</span><span class='line'>          <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyModel</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">SqlModelHelpers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">use_table_for_app</span> <span class="n">aid</span>
</span><span class='line'>    <span class="n">setup_connection</span> <span class="n">aid</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">table_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if we want to use this functionality in some other models, we just include that module. This code can certainly be improved further, post your suggestions :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Define module programmatically]]></title>
    <link href="http://stulentsev.github.com/2012/04/define-module-programmatically/"/>
    <updated>2012-04-02T03:14:50+04:00</updated>
    <id>http://stulentsev.github.com/2012/04/define-module-programmatically</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given a module <code>Foo</code>, how do you define a nested module <code>Bar</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Bar</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a number of ways. First, most obvious one is to eval a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s1">&#39;Bar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;</span><span class="no">RUBY</span>
</span><span class='line'><span class="sh">  module #{name}</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="no">RUBY</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span> <span class="c1"># =&gt; Foo::Bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this certainly works and gets job done, it has some flaws. First, it&#8217;s a string, so some editors and IDEs will get confused and lose coloring/completion. Second, there&#8217;s no validation on module name. In best case, you&#8217;ll get compiler error. In worst case, you&#8217;ll get hard to track bugs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">const_set</span><span class="p">(</span><span class="ss">:Bar</span><span class="p">,</span> <span class="n">bar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">::</span><span class="no">Bar</span> <span class="c1"># =&gt; Foo::Bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one is better. You clearly state that you&#8217;re going to set a constant, and module name is pretty restricted.</p>

<p>Are there other ways to do this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: for..in loop]]></title>
    <link href="http://stulentsev.github.com/2012/03/ruby-forin-loop/"/>
    <updated>2012-03-31T11:19:36+04:00</updated>
    <id>http://stulentsev.github.com/2012/03/ruby-forin-loop</id>
    <content type="html"><![CDATA[<p>You live to learn every day. Today I discovered <code>for..in</code> loop in ruby. When I saw it in a question on <a href="http://stackoverflow.com">stackoverflow</a>, I was like &#8220;Hey, dude, this is ruby, not javascript!&#8221; in my head. But, apparently, it&#8217;s legal ruby :)</p>

<pre><code>arr = [1, 2, 3]

for a in arr
  puts "element #{a}"
end

#=&gt; element 1
#=&gt; element 2
#=&gt; element 3  
</code></pre>

<p>You can put ranges in there also.</p>

<pre><code>for a in (1..10)
  puts a
end
</code></pre>

<p>I usually write such loops with <code>.each</code>, but good to know there&#8217;s another way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with classes: find which class is the biggest :)]]></title>
    <link href="http://stulentsev.github.com/2012/03/fun-with-classes-find-which-class-is-the-biggest/"/>
    <updated>2012-03-30T05:13:27+04:00</updated>
    <id>http://stulentsev.github.com/2012/03/fun-with-classes-find-which-class-is-the-biggest</id>
    <content type="html"><![CDATA[<p>Did you know that in Ruby you can compare classes with &#8216;less-than&#8217; and &#8216;greater-than&#8217; operators? I did not (until today). Observe:</p>

<pre><code>class A
end

class B &lt; A
end

class C &lt; A
end

class D &lt; B
end

A &lt; B # false
A &gt; B # true
D &lt; A # true
D &lt; B # true
D &lt; C # nil
C &gt; D # nil
</code></pre>

<p>This operator returns a boolean value (as one would expect), so you can write code like this:</p>

<pre><code>puts "B inherits from A" if B &lt; A
</code></pre>

<p>Note how it resembles the class definition syntax. I think that this is simply brilliant (not very intuitive, though. I wouldn&#8217;t think of writing this code).</p>

<p>Now that we know this fact, let&#8217;s try to sort the classes :)</p>

<pre><code>class A
end

class B &lt; A
end

class C &lt; A
end

class D &lt; B
end

class E &lt; A
end

class Class
  # we need to define the spaceship operator for classes, since it's not defined yet.
  def &lt;=&gt; other
    return 0 if self == other
    return -1 if self &lt; other
    1
  end
end

klasses = [A, B, C, D, E]

klasses.sort # [E, C, D, B, A]
</code></pre>

<p>Now this class hierarchy is sorted, with children first and parents last. Homework: come up with a practical application for this :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to dump your MongoDB database partially (only selected tables)]]></title>
    <link href="http://stulentsev.github.com/2012/03/how-to-dump-your-mongodb-database-partially-only-selected-tables/"/>
    <updated>2012-03-21T19:15:22+04:00</updated>
    <id>http://stulentsev.github.com/2012/03/how-to-dump-your-mongodb-database-partially-only-selected-tables</id>
    <content type="html"><![CDATA[<p>Let&#8217;s say you want to dump your MongoDB database. There&#8217;s a handy tool that does just that, <strong>mongodump</strong>.</p>

<pre><code>mongodump
</code></pre>

<p>If executes without any arguments it will try to connect to localhost:27017 and dump all databases. You can specify a single database that you&#8217;re interested in and it will dump just this database.</p>

<pre><code>mongodump -d mydb
</code></pre>

<p>But in some cases you don&#8217;t want to dump the whole database. In my case, it&#8217;s an analytics application and 99% of data is in raw event collections (<strong>events20120320</strong>, <strong>events20120321</strong>, &#8230;). I am interested only in a small number of &#8220;important&#8221; collections. But <strong>mongodump</strong> doesn&#8217;t provide us with an option to specify several collections. You can only dump one collection at a time. If you don&#8217;t mind some typing, that&#8217;s easy.</p>

<pre><code>mongodump -d mydb -c mycoll1
mongodump -d mydb -c mycoll2
mongodump -d mydb -c mycoll5
</code></pre>

<p>But we&#8217;re all programmers, so let&#8217;s automate this stuff. I, personally, never used bash loops before, and it seems like a good use case for them. Let&#8217;s do it.</p>

<pre><code>colls=( mycoll1 mycoll2 mycoll5 )

for c in ${colls[@]}
do
  mongodump -d mydb -c $c
done
</code></pre>

<p>First line defines a bash array literal. <strong>Don&#8217;t use commas to delimit array elements</strong>, they&#8217;ll become part of the element. The <strong>${colls[@]}</strong> string means &#8220;all array elements&#8221; and it can be used anywhere where a variable is expected. The rest is pretty straightforward, I think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying with Sinatra + Capistrano + Unicorn]]></title>
    <link href="http://stulentsev.github.com/2012/03/deploying-with-sinatra-capistrano-unicorn/"/>
    <updated>2012-03-09T20:02:46+04:00</updated>
    <id>http://stulentsev.github.com/2012/03/deploying-with-sinatra-capistrano-unicorn</id>
    <content type="html"><![CDATA[<p>Today we&#8217;ll be deploying a simple Sinatra app with Capistrano, using Unicorn as our web server. First things first: let&#8217;s think of a stupid name for this project. What about &#8220;sincapun&#8221;? Any objections? Good, let&#8217;s proceed.</p>

<pre><code>mkdir sincapun
cd sincapun
</code></pre>

<p>Minimal runnable version:</p>

<pre><code># Gemfile
gem 'sinatra'


# sincapun.rb
require 'sinatra'

get '/' do
    "Hello world"
end
</code></pre>

<p>Let&#8217;s see if we can run it&#8230;</p>

<pre><code>$ bundle exec ruby sincapun.rb 
[2012-03-09 16:04:17] INFO  WEBrick 1.3.1
[2012-03-09 16:04:17] INFO  ruby 1.9.3 (2012-02-16) [x86_64-darwin11.3.0]
== Sinatra/1.3.2 has taken the stage on 4567 for development with backup from WEBrick
[2012-03-09 16:04:17] INFO  WEBrick::HTTPServer#start: pid=14871 port=4567
</code></pre>

<p>So far, so good. Now let&#8217;s convert it to modular app and create a proper rackup file.</p>

<pre><code># sincapun.rb
require 'sinatra'

class Sincapun &lt; Sinatra::Base
  get '/' do
    "Hello world"
  end
end

# config.ru
require './sincapun'
run Sincapun
</code></pre>

<p>At this point our app is runnable by every Rack-compatible server (thin, unicorn, &#8230;). Let&#8217;s add some Capistrano to it.</p>

<pre><code># Gemfile
source :rubygems

gem 'sinatra'
gem 'unicorn'
gem 'capistrano'







$ bundle install
Using highline (1.6.11) 
Using net-ssh (2.3.0) 
Using net-scp (1.0.4) 
Using net-sftp (2.0.5) 
Using net-ssh-gateway (1.1.0) 
Using capistrano (2.11.2) 
Using kgio (2.7.2) 
Using rack (1.4.1) 
Using rack-protection (1.2.0) 
Using raindrops (0.8.0) 
Using tilt (1.3.3) 
Using sinatra (1.3.2) 
Using unicorn (4.2.0) 
Using bundler (1.0.22) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

$ capify .
[add] writing './Capfile'
[add] making directory './config'
[add] writing './config/deploy.rb'
[done] capified!
</code></pre>

<p>Let&#8217;s improve our capistrano config a little bit.</p>

<pre><code># config/deploy.rb
# We're using RVM on a server, need this.
$:.unshift(File.expand_path('./lib', ENV['rvm_path']))
require 'rvm/capistrano'
set :rvm_ruby_string, '1.9.3'
set :rvm_type, :user

# Bundler tasks
require 'bundler/capistrano'

set :application, "sincapun"
set :repository,  "git@github.com:stulentsev/sincapun.git"

set :scm, :git

# do not use sudo
set :use_sudo, false
set(:run_method) { use_sudo ? :sudo : :run }

# This is needed to correctly handle sudo password prompt
default_run_options[:pty] = true

set :user, "myname"
set :group, user
set :runner, user

set :host, "#{user}@myhost" # We need to be able to SSH to that box as this user.
role :web, host
role :app, host

set :rails_env, :production

# Where will it be located on a server?
set :deploy_to, "/srv/#{application}"
set :unicorn_conf, "#{deploy_to}/current/config/unicorn.rb"
set :unicorn_pid, "#{deploy_to}/shared/pids/unicorn.pid"

# Unicorn control tasks
namespace :deploy do
  task :restart do
    run "if [ -f #{unicorn_pid} ]; then kill -USR2 `cat #{unicorn_pid}`; else cd #{deploy_to}/current &amp;&amp; bundle exec unicorn -c #{unicorn_conf} -E #{rails_env} -D; fi"
  end
  task :start do
    run "cd #{deploy_to}/current &amp;&amp; bundle exec unicorn -c #{unicorn_conf} -E #{rails_env} -D"
  end
  task :stop do
    run "if [ -f #{unicorn_pid} ]; then kill -QUIT `cat #{unicorn_pid}`; fi"
  end
end
</code></pre>

<p>We need a config file for Unicorn. Here is what it may look like:</p>

<pre><code># define paths and filenames
deploy_to = "/srv/sincapun"
rails_root = "#{deploy_to}/current"
pid_file = "#{deploy_to}/shared/pids/unicorn.pid"
socket_file= "#{deploy_to}/shared/unicorn.sock"
log_file = "#{rails_root}/log/unicorn.log"
err_log = "#{rails_root}/log/unicorn_error.log"
old_pid = pid_file + '.oldbin'

timeout 30
worker_processes 2 # increase or decrease
listen socket_file, :backlog =&gt; 1024

pid pid_file
stderr_path err_log
stdout_path log_file

# make forks faster
preload_app true 

# make sure that Bundler finds the Gemfile
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', File.dirname(__FILE__))
end

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
      ActiveRecord::Base.connection.disconnect!

  # zero downtime deploy magic:
  # if unicorn is already running, ask it to start a new process and quit.
  if File.exists?(old_pid) &amp;&amp; server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|

  # re-establish activerecord connections.
  defined?(ActiveRecord::Base) and
      ActiveRecord::Base.establish_connection
end
</code></pre>

<p>That should do it. Now you can deploy your app, assuming that you have <a href="http://beginrescueend.com/">RVM</a> on the server, you can SSH into it and write to /srv directory.</p>

<pre><code>cap deploy:setup
cap deploy
</code></pre>

<p>Deploy should spit a lot of text into the console, and there should be no errors. Verify that our unicorns are launched correctly by logging into the server and running this:</p>

<pre><code>$ ps aux | grep sincapun
myuser   24851  2.0  0.1  88480 21024 ?        Sl   11:42   0:00 unicorn master -c /srv/sincapun/current/config/unicorn.rb -E production -D                                         
myuser   24854  0.1  0.1  88480 19732 ?        Sl   11:42   0:00 unicorn worker[0] -c /srv/sincapun/current/config/unicorn.rb -E production -D                                      
myuser   24857  0.1  0.1  88480 19732 ?        Sl   11:42   0:00 unicorn worker[1] -c /srv/sincapun/current/config/unicorn.rb -E production -D                                      
</code></pre>

<p>To access these unicorns from the internet, you need to put a reverse proxy in front of them. But that is another story.</p>

<p>You can get a full copy of this code <a href="https://github.com/stulentsev/sincapun">from Github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to keep your system clock synchronized on Ubuntu?]]></title>
    <link href="http://stulentsev.github.com/2012/03/how-to-keep-your-system-clock-synchronized-on-ubuntu/"/>
    <updated>2012-03-09T12:10:18+04:00</updated>
    <id>http://stulentsev.github.com/2012/03/how-to-keep-your-system-clock-synchronized-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Your server&#8217;s hardware clock isn&#8217;t perfectly accurate. It may run faster or slower (in my experience it was always slower). So it is important to synchronize it every so often, or else you might encounter some unexpected bugs. There&#8217;s a command in Ubuntu that synchronizes hardware clock against atomic clock servers. It&#8217;s called ntpdate</p>

<pre><code>$ sudo ntpdate ntp.ubuntu.com
 9 Mar 03:59:12 ntpdate[7225]: step time server 91.189.94.4 offset 179.440440 sec
</code></pre>

<p>This one was three minutes behind. Could be worse, though. So, now clock is more or less accurate. To keep it this way, let&#8217;s add an hourly cron job. Create a file called &#8216;ntpdate&#8217; (for example) at &#8216;/etc/cron.hourly&#8217; with this content:</p>

<pre><code>#! /bin/sh

ntpdate ntp.ubuntu.com
</code></pre>

<p>We don&#8217;t need sudo here, because these jobs are run with root privileges. Now make that file executable.</p>

<pre><code>sudo chmod +x /etc/cron.hourly/ntpdate
</code></pre>

<p>We&#8217;re all set now. Come back a few days later and verify that clock doesn&#8217;t deviate as much anymore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: how to override class method with a module]]></title>
    <link href="http://stulentsev.github.com/2012/02/ruby-how-to-override-class-method-with-a-module/"/>
    <updated>2012-02-03T21:09:00+04:00</updated>
    <id>http://stulentsev.github.com/2012/02/ruby-how-to-override-class-method-with-a-module</id>
    <content type="html"><![CDATA[<p>This seems to be a popular interview question. It indeed requires advanced knowledge of ruby.</p>

<blockquote><p>You have a class with a class method. Write a module that, when included, will override that class method.</p></blockquote>

<h3>Explanation of the problem</h3>

<p>Now classic way of mixing in class methods is this (and it doesn&#8217;t solve the problem, of course).</p>

<pre><code>module FooModule
  def self.included base
    base.extend ClassMethods
  end

  module ClassMethods
    def bar
      puts "module"
    end
  end
end

class Klass
  include FooModule

  def self.bar
    puts 'class'
  end
end


Klass.bar #=&gt; class
</code></pre>

<p>When modules are included or extended into a class, its methods are placed right above this class&#8217; methods in inheritance chain. This means that if we were to call <code>super</code> in that class method, it would print &#8220;module&#8221;. But we don&#8217;t want to touch original class definition, we want to alter it from outside.</p>

<h3>So, can we do something?</h3>

<p>Good for us, ruby has a concept of <a href="http://www.google.ru/search?ix=hca&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=ruby+open+classes">&#8220;open classes&#8221;</a>. This means that we can change virtually everything in the app, even some 3rd-party libraries. Every class can &#8220;opened&#8221; and new methods can be added to it, or old methods can be redefined. Let&#8217;s look how it works.</p>

<pre><code>class Klass
  def self.bar
    puts 'class'
  end
end

class Klass
  def self.bar
    puts 'class 2'
  end
end

Klass.bar #=&gt; class 2
</code></pre>

<p>The second class definition does not overwrite previous one, it opens and alters it. In this case, it happened to define a method with the same name. This resulted in old method being overwritten by the new one. This works with any classes, even base library classes.</p>

<pre><code>puts [1, 2, 3].to_s #=&gt; [1, 2, 3]

class Array
  def to_s
    "an array: #{join ', '}"
  end
end

puts [1, 2, 3].to_s #=&gt; an array: 1, 2, 3
</code></pre>

<p>Or the same code can be rewritten as</p>

<pre><code>puts [1, 2, 3].to_s #=&gt; [1, 2, 3]

Array.class_eval do
  def to_s
    "an array: #{join ', '}"
  end
end

puts [1, 2, 3].to_s #=&gt; an array: 1, 2, 3
</code></pre>

<h3>Applying the knowledge</h3>

<p>Let&#8217;s start with simpler things, like overriding an instance method.</p>

<pre><code>class Klass
  def say
    puts 'class'
  end
end

module FooModule
  def self.included base
    base.class_eval do
      def say
        puts "module"
      end
    end
  end
end


Klass.send(:include, FooModule)

Klass.new.say #=&gt; module
</code></pre>

<p>Modules have a special callback that gets called every time a module is included in a class. We can use that to call class_eval on that class and redefine a method.</p>

<p>Replacing a class method is done in a similar way.</p>

<pre><code>class Klass
  def self.say
    puts 'class'
  end
end

module FooModule
  def self.included base
    base.instance_eval do
      def say
        puts "module"
      end
    end
  end
end


Klass.send(:include, FooModule)

Klass.say #=&gt; module
</code></pre>

<p>The only difference here is that we call instance_eval instead of class_eval. This can be a very confusing part. In short, class_eval creates instance methods and instance_eval creates class methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongoid, db.system.namespaces queries]]></title>
    <link href="http://stulentsev.github.com/2012/02/mongoid-db-system-namespaces-queries/"/>
    <updated>2012-02-03T20:12:54+04:00</updated>
    <id>http://stulentsev.github.com/2012/02/mongoid-db-system-namespaces-queries</id>
    <content type="html"><![CDATA[<p>Recently I faced some issues with <a href="http://mongoid.org">Mongoid</a> when upgrading my Rails app from REE+Passenger to MRI 1.9.3+Unicorn.</p>

<p>There are some Resque workers in the background. After some deploy they started to consume a ton of traffic from MongoDB. After some investigation, I found that they heavily read <code>system.namespaces</code> collection. I tried upgrading to latest versions of <code>mongoid</code>(2.4.3) and <code>mongo</code>(1.5.2) to no avail. This does not happen with normal unicorn workers. This also does not happen if I downgrade <code>mongoid</code> to 2.0.1.</p>

<p>I am still not sure what&#8217;s happening here. I&#8217;ll update this post when I discover something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to quickly lock screen in Mac OS X?]]></title>
    <link href="http://stulentsev.github.com/2012/01/how-to-quickly-lock-screen-in-mac-os-x/"/>
    <updated>2012-01-27T21:28:28+04:00</updated>
    <id>http://stulentsev.github.com/2012/01/how-to-quickly-lock-screen-in-mac-os-x</id>
    <content type="html"><![CDATA[<p>I am tired of googling the same information over and over, so I am posting it here.</p>

<p>To quickly lock your screen, press Ctrl+Shift+Eject.</p>

<p>Also, you can press Fn+Ctrl+Eject to quickly restart your Mac, shut it down or put to sleep.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Email validation done right]]></title>
    <link href="http://stulentsev.github.com/2012/01/email-validation-done-right/"/>
    <updated>2012-01-11T21:48:24+04:00</updated>
    <id>http://stulentsev.github.com/2012/01/email-validation-done-right</id>
    <content type="html"><![CDATA[<p>Let&#8217;s imagine that you have to check if a string is a valid email. You could come up with something like:</p>

<pre><code>    /[a-zA-Z0-9\.]+@[a-z]+\.[a-z]+/
</code></pre>

<p>It works, right? WRONG. Sure it&#8217;ll handle a couple of your test examples. But it&#8217;s not ready for real world usage. Here&#8217;s a standards compliant Perl regex.</p>

<pre><code>/(?(DEFINE)
   (?&lt;address&gt;         (?&amp;mailbox;) | (?&amp;group;))
   (?&lt;mailbox&gt;         (?&amp;name;_addr) | (?&amp;addr;_spec))
   (?&lt;name_addr&gt;       (?&amp;display;_name)? (?&amp;angle;_addr))
   (?&lt;angle_addr&gt;      (?&amp;CFWS;)? &lt; (?&amp;addr;_spec) &gt; (?&amp;CFWS;)?)
   (?&lt;group&gt;           (?&amp;display;_name) : (?:(?&amp;mailbox;_list) | (?&amp;CFWS;))? ;
                                          (?&amp;CFWS;)?)
   (?&lt;display_name&gt;    (?&amp;phrase;))
   (?&lt;mailbox_list&gt;    (?&amp;mailbox;) (?: , (?&amp;mailbox;))*)

   (?&lt;addr_spec&gt;       (?&amp;local;_part) \@ (?&amp;domain;))
   (?&lt;local_part&gt;      (?&amp;dot;_atom) | (?&amp;quoted;_string))
   (?&lt;domain&gt;          (?&amp;dot;_atom) | (?&amp;domain;_literal))
   (?&lt;domain_literal&gt;  (?&amp;CFWS;)? \[ (?: (?&amp;FWS;)? (?&amp;dcontent;))* (?&amp;FWS;)?
                                 \] (?&amp;CFWS;)?)
   (?&lt;dcontent&gt;        (?&amp;dtext;) | (?&amp;quoted;_pair))
   (?&lt;dtext&gt;           (?&amp;NO;_WS_CTL) | [\x21-\x5a\x5e-\x7e])

   (?&lt;atext&gt;           (?&amp;ALPHA;) | (?&amp;DIGIT;) | [!#\$%&amp;'*+-/=?^_`{|}~])
   (?&lt;atom&gt;            (?&amp;CFWS;)? (?&amp;atext;)+ (?&amp;CFWS;)?)
   (?&lt;dot_atom&gt;        (?&amp;CFWS;)? (?&amp;dot;_atom_text) (?&amp;CFWS;)?)
   (?&lt;dot_atom_text&gt;   (?&amp;atext;)+ (?: \. (?&amp;atext;)+)*)

   (?&lt;text&gt;            [\x01-\x09\x0b\x0c\x0e-\x7f])
   (?&lt;quoted_pair&gt;     \\ (?&amp;text;))

   (?&lt;qtext&gt;           (?&amp;NO;_WS_CTL) | [\x21\x23-\x5b\x5d-\x7e])
   (?&lt;qcontent&gt;        (?&amp;qtext;) | (?&amp;quoted;_pair))
   (?&lt;quoted_string&gt;   (?&amp;CFWS;)? (?&amp;DQUOTE;) (?:(?&amp;FWS;)? (?&amp;qcontent;))*
                        (?&amp;FWS;)? (?&amp;DQUOTE;) (?&amp;CFWS;)?)

   (?&lt;word&gt;            (?&amp;atom;) | (?&amp;quoted;_string))
   (?&lt;phrase&gt;          (?&amp;word;)+)

   # Folding white space
   (?&lt;fws&gt;             (?: (?&amp;WSP;)* (?&amp;CRLF;))? (?&amp;WSP;)+)
   (?&lt;ctext&gt;           (?&amp;NO;_WS_CTL) | [\x21-\x27\x2a-\x5b\x5d-\x7e])
   (?&lt;ccontent&gt;        (?&amp;ctext;) | (?&amp;quoted;_pair) | (?&amp;comment;))
   (?&lt;comment&gt;         \( (?: (?&amp;FWS;)? (?&amp;ccontent;))* (?&amp;FWS;)? \) )
   (?&lt;cfws&gt;            (?: (?&amp;FWS;)? (?&amp;comment;))*
                       (?: (?:(?&amp;FWS;)? (?&amp;comment;)) | (?&amp;FWS;)))

   # No whitespace control
   (?&lt;no_ws_ctl&gt;       [\x01-\x08\x0b\x0c\x0e-\x1f\x7f])

   (?&lt;alpha&gt;           [A-Za-z])
   (?&lt;digit&gt;           [0-9])
   (?&lt;crlf&gt;            \x0d \x0a)
   (?&lt;dquote&gt;          ")
   (?&lt;wsp&gt;             [\x20\x09])
 )

 (?&amp;address;)/x
</code></pre>

<p> I couldn&#8217;t even imagine that the matter is <em>this</em> complex.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery chaining]]></title>
    <link href="http://stulentsev.github.com/2010/08/jquery-chaining/"/>
    <updated>2010-08-24T17:00:13+04:00</updated>
    <id>http://stulentsev.github.com/2010/08/jquery-chaining</id>
    <content type="html"><![CDATA[<p>I am beginning to fall in love with jQuery. Screw you, <a href="http://vkontakte.ru">bicycle inventors</a>! :-)</p>

<pre><code>    function next_step() {
        // note how elegant and self-explanatory this code is.
        var cl = 'step_selected';
        $('.' + cl).removeClass(cl).next().addClass(cl);

        // Also look at previous version of the code,
        // before I remembered about chaining methods.

        // var li = $('.step_selected');
        // li.removeClass('step_selected');
        // li.next().addClass('step_selected');

        // Not as sexy, right? :-)
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Funny side benefit :-)]]></title>
    <link href="http://stulentsev.github.com/2010/08/funny-side-benefit/"/>
    <updated>2010-08-22T17:17:18+04:00</updated>
    <id>http://stulentsev.github.com/2010/08/funny-side-benefit</id>
    <content type="html"><![CDATA[<blockquote><p>There I was, minding my own business, trying to solve problems in graph theory and I accidentally made a Sudoku puzzle solver! Isn&#8217;t it funny how life turns out sometimes? But that&#8217;s just how awesome LINQ is.</p></blockquote>

<p><a href="http://blogs.msdn.com/b/ericlippert/archive/2010/07/29/graph-colouring-part-five.aspx">Eric Lippert on LINQ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atomic updates, part 2]]></title>
    <link href="http://stulentsev.github.com/2010/06/atomic-updates-part-2/"/>
    <updated>2010-06-02T15:12:41+04:00</updated>
    <id>http://stulentsev.github.com/2010/06/atomic-updates-part-2</id>
    <content type="html"><![CDATA[<p>Let&#8217;s review another common scenario: posts and votes. Mongo&#8217;s approach would be to store vote count in the post itself (caching) and keep voters also in the post, in an array field. Let&#8217;s assume we want to register a new vote on post. This operation consists of three steps:</p>

<blockquote><ol>
<li>ensure that the voter hasn&#8217;t voted yet, and, if not,</li>
<li>increment the number of votes and</li>
<li>add the new voter to the array.</li>
</ol>
</blockquote>

<p>MongoDB&#8217;s query and update features allows us to perform all three actions in a single operation. Here&#8217;s what that would look like from the shell:</p>

<blockquote><pre><code>// Assume that story_id and user_id represent real story and user ids.
db.stories.update({_id: story_id, voters: {'$ne': user_id}}, 
  {'$inc': {votes: 1}, '$push': {voters: user_id}});
</code></pre></blockquote>

<p>What this says is &#8220;get me a story with the given id whose voters array does not contain the given user id and, if you find such a story, perform two atomic updates: first, increment votes by 1 and then push the user id onto the voters array.&#8221;</p>

<p>This operation highly efficient; it&#8217;s also reliable. The one caveat is that, because update operations are &#8220;fire and forget,&#8221; you won&#8217;t get a response from the server. But in most cases, this should be a non-issue.</p>

<p>quote from <a href="http://www.mongodb.org/display/DOCS/MongoDB+Data+Modeling+and+Rails">MongoDB site</a>.</p>

<p>How would you implement this in your regular SQL database?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoId and atomic increment]]></title>
    <link href="http://stulentsev.github.com/2010/06/mongoid-and-atomic-increment/"/>
    <updated>2010-06-02T00:01:26+04:00</updated>
    <id>http://stulentsev.github.com/2010/06/mongoid-and-atomic-increment</id>
    <content type="html"><![CDATA[<p>I am starting to learn this new piece of technology, the MongoDB. It has many sweet features. However, using Ruby driver directly is not too comfortable. Plus we&#8217;re all hooked to ORM sweeteners. So people started developing ORM libraries for MongoDB and Ruby (<a href="http://mongoid.org">MongoId</a>, <a href="http://github.com/mongomapper/mongomapper">MongoMapper</a> to name a few).</p>

<p>I have decided to try MongoId first. It seems to be a quite good library. However, it still has gaps in documentation. Today I was finding out how to perform an atomic increment of a field. In SQL world this would look like:</p>

<pre><code>update users set spam_count = spam_count + 1;
</code></pre>

<p>Mongo Ruby driver supports this kind of operation, but MongoId doesn&#8217;t. So I was trying to get down to the driver. And this is what I couldn&#8217;t easily find in the docs. If you&#8217;re like me, I&#8217;ll save you a couple of hours. Here it is:</p>

<pre><code># assume we know object id already
User.collection.update({'_id' =&gt; '4c05848e45760182b5000001'}, {'$inc' =&gt; {'spam_count' =&gt; 1}})
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intuitive behaviour]]></title>
    <link href="http://stulentsev.github.com/2009/05/intuitive-behaviour/"/>
    <updated>2009-05-18T16:19:25+04:00</updated>
    <id>http://stulentsev.github.com/2009/05/intuitive-behaviour</id>
    <content type="html"><![CDATA[<p>Today I was looking at exception stack trace. One of suspicious places was &#8216;&#8230;\reports_controller.rb:129&#8221;. Okay, navigating to this location using RubyMine is a piece of cake. Ctrl+Shift+N to get to reports_controller.rb, then Ctrl+G to position caret at specified line. But hey, that&#8217;s two actions. I hit Ctrl+Shift+N, put &#8216;reports_controller.rb:129&#8217; in and voila! It worked just as I expected!
RubyMine: +1 to intuitivity, +1 to overall impression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced default parameters]]></title>
    <link href="http://stulentsev.github.com/2009/03/advanced-default-parametes/"/>
    <updated>2009-03-10T02:20:29+03:00</updated>
    <id>http://stulentsev.github.com/2009/03/advanced-default-parametes</id>
    <content type="html"><![CDATA[<p>Today I was quite amazed by one of Ruby features. It is about default values of method parameters. For example you can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">get_current_actions</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">status_id</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:status_id</span><span class="o">]</span> <span class="o">||</span> <span class="no">DEFAULT_STATUS_ID</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># implementation goes here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is saying basically this: &#8220;if status_id is not passed explicitly, try to take its value from <strong>params</strong> array. If it doesn&#8217;t contain specified key, then fall back to a constant&#8221;. This feature (as almost all the rest of Ruby magic) made avaiable by Ruby&#8217;s nature: it is interpreted language. This type of code is totally unusual to guys like me, who come from the world of static typing and compiled languages. But I think I&#8217;m gonna get used to it :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterations are good]]></title>
    <link href="http://stulentsev.github.com/2009/03/iterations-are-good/"/>
    <updated>2009-03-04T19:11:47+03:00</updated>
    <id>http://stulentsev.github.com/2009/03/iterations-are-good</id>
    <content type="html"><![CDATA[<p>Iterations in software development. Tried to implement proper solution on the first try? I bet you failed. It&#8217;s like in Google Earth zooming in your house from the planet view. To achieve your goal, you&#8217;ve got to advance a little bit, adjust your position, advance further. Iterate until done.</p>
]]></content>
  </entry>
  
</feed>
