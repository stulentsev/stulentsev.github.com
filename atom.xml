<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Byte Friendly]]></title>
  <link href="http://tech.tulentsev.com/atom.xml" rel="self"/>
  <link href="http://tech.tulentsev.com/"/>
  <updated>2013-11-04T13:31:58+02:00</updated>
  <id>http://tech.tulentsev.com/</id>
  <author>
    <name><![CDATA[Sergio Tulentsev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pipeline processing in Go]]></title>
    <link href="http://tech.tulentsev.com/2013/11/pipeline-processing-in-go/"/>
    <updated>2013-11-04T12:13:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/11/pipeline-processing-in-go</id>
    <content type="html"><![CDATA[<p>Pipeline processing is a very powerful design idiom. You have some simple building blocks that you can arrange in different combinations to perform complex tasks. A classic example of that is unix command line. Each tool is very simple. It does only job. But it still amazes me regularly, what you can achieve by simply combining those tools into a pipeline and feeding/piping data through it.</p>

<p>Say, you&#8217;re building an RSS reader that shows new posts live. Implementing it in a regular procedural manner is easy. Something like this (pseudo-code):</p>

<pre>
  loop {
    fetch posts
    for each post {
      if we have not yet seen this post {
        mark post seen
        show it to user
      }
    }
  }
</pre>


<p>Say, now we want to do a focused reading. Which means that we only want to see a subset of posts which satisfy some arbitrary criteria (filter by tags, etc.). No problemo, we just add one conditional in there.</p>

<pre>
  loop {
    fetch posts
    for each post {
      if post is interesting {
        if we have not yet seen this post {
          mark post seen
          show it to user
        }
      }
    }
  }
</pre>


<p>Now it&#8217;s getting a little bit difficult to read and it will get worse. All business rules are in the same pile of code and it may be difficult to tell them apart.</p>

<p>But if you think about it, there is a pipeline that consists of several primitive segments:</p>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2013/11/04/simple_pipeline.png"></p>

<p>Each individual block is completely separate from each other (well, maybe except that &#8220;select unseen&#8221; and &#8220;mark all seen&#8221; might use the same storage). If we were to, say, remove caching (and stop serving cached content), we&#8217;d only have to take out those two segments. If we want to change how content is presented to user (print to terminal, send to text-to-speect engine, &#8230;), we only have to replace the final segment. The rest of the pipeline stays untouched. And the aforementioned tag filtering - we just insert it after fetcher:</p>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2013/11/04/pipeline_with_filter.png"></p>

<p>In the pipeline, each segment can either swallow a message or pass it on (after applying some transformation (optional)). Two simple rules, infinite flexibility.</p>

<p>Go language allows for natural expression of this design: goroutines as segments, connected by channels.</p>

<p>Here&#8217;s an intentionally primitive example, which filters and transforms a stream of integers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// type alias for our pipeline segment</span>
</span><span class='line'><span class="c1">// segment is a function that reads from a stream of integers</span>
</span><span class='line'><span class="c1">//  and writes to a stream of integers</span>
</span><span class='line'><span class="k">type</span> <span class="n">pipelineSegment</span> <span class="k">func</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// construct our pipeline. Put generator first, then filters/modifiers</span>
</span><span class='line'>  <span class="n">out</span> <span class="p">:=</span> <span class="n">makePipeline</span><span class="p">(</span><span class="n">generator</span><span class="p">,</span> <span class="n">onlyOdd</span><span class="p">,</span> <span class="n">plusOne</span><span class="p">,</span> <span class="n">squared</span><span class="p">,</span> <span class="n">plusOne</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">v</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">out</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fmt</span><span class="p">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">&quot;Resulting value: %d\n&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This simply generates sequential integers in infinite loop.</span>
</span><span class='line'><span class="k">func</span> <span class="n">generator</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">i</span> <span class="p">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">i</span> <span class="p">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="p">*</span> <span class="n">time</span><span class="p">.</span><span class="n">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Filter. Selects only odd integers. Even integers are swallowed.</span>
</span><span class='line'><span class="k">func</span> <span class="n">onlyOdd</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">val</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">in</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span><span class="p">%</span><span class="mi">2</span> <span class="p">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">val</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Modifier. Adds 1 and passes on.</span>
</span><span class='line'><span class="k">func</span> <span class="n">plusOne</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">val</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">in</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">val</span> <span class="p">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Modifier. Passes a square of incoming integer.</span>
</span><span class='line'><span class="k">func</span> <span class="n">squared</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">val</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">in</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">out</span> <span class="p">&lt;-</span> <span class="n">val</span> <span class="p">*</span> <span class="n">val</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Generates pipeline out of individual segments. </span>
</span><span class='line'><span class="c1">// Returns an &quot;exhaust pipe&quot;, from which fully processed integers can be read.</span>
</span><span class='line'><span class="k">func</span> <span class="n">makePipeline</span><span class="p">(</span><span class="n">segments</span> <span class="p">...</span><span class="n">pipelineSegment</span><span class="p">)</span> <span class="p">(</span><span class="n">out</span> <span class="k">chan</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">current_input</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">current_output</span> <span class="k">chan</span> <span class="nb">int</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">seg</span> <span class="p">:=</span> <span class="k">range</span> <span class="n">segments</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">current_output</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="n">seg</span><span class="p">(</span><span class="n">current_input</span><span class="p">,</span> <span class="n">current_output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">current_input</span> <span class="p">=</span> <span class="n">current_output</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">current_output</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Produced output:</p>

<pre>
  Resulting value: 5
  Resulting value: 17
  Resulting value: 37
  Resulting value: 65
  Resulting value: 101
  Resulting value: 145
  Resulting value: 197
  ...
</pre>


<p>First generated integer is 0. It&#8217;s even (well, certainly not odd), so it does not make it past filter.</p>

<p>Next one is 1. It passes filter. Then it gets +1, so it&#8217;s now 2. Then it&#8217;s squared and becomes 4. And finally, one more +1 which results in 5. There are no more segments, so this value is read from the output pipe and printed to terminal.</p>

<p>Hope this was useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide/exclude directories in TextMate 2]]></title>
    <link href="http://tech.tulentsev.com/2013/10/hide-slash-exclude-directories-in-textmate-2/"/>
    <updated>2013-10-30T10:24:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/10/hide-slash-exclude-directories-in-textmate-2</id>
    <content type="html"><![CDATA[<p>I decided to give TextMate 2 another try today. Hopefully it won&#8217;t freeze upon trying to install a bundle like it did last time. Now I don&#8217;t recall which bundle was that, but so far things are going well. Mostly.</p>

<p>When I opened my Rails app and tried to navigate to file (<code>Cmd+T</code>), I saw this:</p>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2013/10/30/tm2_tmp_files.png"></p>

<p>At first I thought that these are files from <code>.git</code> folder and spent embarrassing amount of time trying to make TM2 hide that folder. But these are actually temp asset files generated by Sprockets and they reside in <code>tmp/assets/...</code>.</p>

<p>Long story short, here&#8217;s how you can hide a directory in TextMate 2, both from project browser and navigation dialog.</p>

<p>Create a <code>.tm_properties</code> file. It can be in current project dir or any parent dir (up to <code>$HOME</code>). Put this line into it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>excludeDirectories = "{tmp,}"</span></code></pre></td></tr></table></div></figure>


<p>It is worth noting that <code>"{tmp}"</code> doesn&#8217;t work. Apparently, TextMate glob parser breaks down if it can&#8217;t find a comma. So we add one. Alternatively we can use this line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>excludeDirectories = "{$excludeDirectories,tmp}"</span></code></pre></td></tr></table></div></figure>


<p>It will amend an existing <code>excludeDirectories</code> setting (empty string by default) instead of replacing. And it also has a comma. :)</p>

<p>Hope this post saved you some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move Capistrano's log directory]]></title>
    <link href="http://tech.tulentsev.com/2013/03/move-capistranos-log-directory/"/>
    <updated>2013-03-11T14:34:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/03/move-capistranos-log-directory</id>
    <content type="html"><![CDATA[<p>So you want to move your log directory? To a separate volume, maybe? But you are afraid that it will break too many things, like all those libraries with <code>#{rails_root}/log</code> paths hardcoded in them? Fear not, there&#8217;s a simple workaround.</p>

<p>As you probably know, capistrano aliases your rails log dir to a shared dir outside of app folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /deploy_path/shared/log /deploy_path/current/log</span></code></pre></td></tr></table></div></figure>


<p>This means that, in fact, all your logs turn up at <code>/deploy_path/shared/log/</code>. Now all we need is to symlink that dir as well!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /var/log/yourapp
</span><span class='line'>
</span><span class='line'><span class="c"># make it writable to the app</span>
</span><span class='line'>sudo chown -R youruser:yourgroup /var/log/yourapp/
</span><span class='line'>
</span><span class='line'><span class="c"># deal with existing log dir (I back it up, but you can remove it, or copy the files to </span>
</span><span class='line'><span class="c">#   the new location)</span>
</span><span class='line'>mv /deploy_path/shared/log /deploy_path/shared/log_
</span><span class='line'>ln -s /var/log/yourapp /deploy_path/shared/log
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cap deploy from an arbitrary branch]]></title>
    <link href="http://tech.tulentsev.com/2013/02/cap-deploy-from-an-arbitrary-branch/"/>
    <updated>2013-02-22T12:34:00+02:00</updated>
    <id>http://tech.tulentsev.com/2013/02/cap-deploy-from-an-arbitrary-branch</id>
    <content type="html"><![CDATA[<p>As you know, capistrano can deploy your app from a specific branch in the repo. You just have to specify it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;develop&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you develop in a single branch, that should do it for you. All commits go to one branch and all deploys are likely served by the same branch. This is a simple model, good enough for small projects.</p>

<p>However, if you adopt <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a>, it encourages you (not to say &#8220;forces&#8221;) to have separate branch for every feature, release or hotfix that you&#8217;re working on. And, naturally, you want to deploy to dev/staging server right from a feature branch, not having to merge it first to develop/master. This is trivial to accomplish, just change the branch name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;feature/my-test-feature&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you have a pending file change. What do you do with it? Commit to source control? That increases file churn rate for absolutely no reason. <code>git checkout</code> that file? This is an extra action, of which you will be tired quite soon (not to mention chance to accidentally commit the file).</p>

<p>Solution? Externalize the setting. When deploying, look in the environment for a branch to use and fallback to default name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BRANCH&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;develop&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">BRANCH</span><span class="o">=</span>feature/my-test-feature cap deploy
</span></code></pre></td></tr></table></div></figure>


<p>Or, if you have multistage enabled</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">BRANCH</span><span class="o">=</span>feature/my-test-feature cap staging deploy
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this requires a bit more typing on each deploy, but at the same time it decreases chances of deploying from a wrong branch.</p>

<p>Happy deploying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting humanized numbers in tablesorter.js]]></title>
    <link href="http://tech.tulentsev.com/2012/12/sorting-humanized-numbers-in-tablesorter-dot-js/"/>
    <updated>2012-12-23T17:48:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/12/sorting-humanized-numbers-in-tablesorter-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://tablesorter.com/docs/">Tablesorter</a> is a jQuery plugin for sorting tables. It appeared first in a couple of &#8220;X jquery table sorting plugins&#8221; blog posts, so I went with it when I needed to sort a table a couple of days ago.</p>

<p>It works pretty well out of the box and it even lets you customize some bits. One of those bits is column parser: if you have special data in a column, you need a special way to sort it.</p>

<p>Here&#8217;s <a href="http://tablesorter.com/docs/example-parsers.html">an official example</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// add parser through the tablesorter addParser method </span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">tablesorter</span><span class="p">.</span><span class="nx">addParser</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// set a unique id </span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;grades&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">is</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// return false so this parser is not auto detected </span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">format</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// format your data for normalization </span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/good/</span><span class="p">,</span><span class="mi">2</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/medium/</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/bad/</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// set type, either numeric or text </span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;table&quot;</span><span class="p">).</span><span class="nx">tablesorter</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="mi">6</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">sorter</span><span class="o">:</span><span class="s1">&#39;grades&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, it leaves much to be desired. Like what to do when I want my parser to be auto-detected. Turns out that this <code>is</code> function is a predicate. It accepts a string and decides whether it can be handled by this parser. Then the <code>format</code> function will make conversion to a normalized textual/numeric form.</p>

<p>In my case I have a table with a lot of numbers. And those numbers are in humanized form. That is, instead of <code>121738</code> I output <code>121.74k</code>. This format is not properly sortable as either number or text, so I wrote a parser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">tablesorter</span><span class="p">.</span><span class="nx">addParser</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;humannum&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">is</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="sr">/^[\d\.]+[Mk]?$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">format</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">is_m</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">is_k</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;k&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fl</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">fl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">is_m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span> <span class="o">=</span> <span class="nx">fl</span> <span class="o">*</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">is_k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span> <span class="o">=</span> <span class="nx">fl</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It basically checks if a string consists of a number followed by an optional &#8220;M&#8221; or &#8220;k&#8221; and, if that&#8217;s the case, converts it to a &#8220;full&#8221; number.</p>

<p>I wish this was in the official doc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queue prioritization in Sidekiq]]></title>
    <link href="http://tech.tulentsev.com/2012/12/queue-prioritization-in-sidekiq/"/>
    <updated>2012-12-17T04:47:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/12/queue-prioritization-in-sidekiq</id>
    <content type="html"><![CDATA[<p>Unlike <a href="https://github.com/defunkt/resque">Resque</a>, <a href="http://mperham.github.com/sidekiq/">Sidekiq</a> allows you to process several queues at the same time. You can even assign priorities. Here&#8217;s an example from default config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">:queues</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">often</span><span class="p-Indicator">,</span> <span class="nv">7</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">default</span><span class="p-Indicator">,</span> <span class="nv">5</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">seldom</span><span class="p-Indicator">,</span> <span class="nv">3</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want two queues have equal rights, just set the same priorities. However, if you omit priority parameter and define your queues like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">:queues</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">email</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">coffee</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">billing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then queues will be checked in a serial manner. That is, Sidekiq will start making coffee only when all emails are sent. If a new email shows up, it will be processed before any other job. In other words, this is how Resque would handle the queues.</p>

<p>Choose whatever fits your task better. It&#8217;s nice to have some flexibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Sidekiq with redis_failover gem]]></title>
    <link href="http://tech.tulentsev.com/2012/12/using-sidekiq-with-redis-failover-gem/"/>
    <updated>2012-12-15T18:23:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/12/using-sidekiq-with-redis-failover-gem</id>
    <content type="html"><![CDATA[<p><a href="http://mperham.github.com/sidekiq/">Sidekiq</a> works pretty well with standard redis client. This is an example of configuring it (<a href="https://github.com/mperham/sidekiq/wiki/Advanced-Options">from official wiki</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sidekiq</span><span class="o">.</span><span class="n">configure_server</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s1">&#39;redis://redis.example.com:7372/12&#39;</span><span class="p">,</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s1">&#39;mynamespace&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When in Unicorn, this block needs to go in unicorn&#39;s `after_fork` callback:</span>
</span><span class='line'><span class="no">Sidekiq</span><span class="o">.</span><span class="n">configure_client</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s1">&#39;redis://redis.example.com:7372/12&#39;</span><span class="p">,</span> <span class="ss">:namespace</span> <span class="o">=&gt;</span> <span class="s1">&#39;mynamespace&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, what if you need a special redis client that can&#8217;t be initialized with redis URL? No worries. Setter for <code>Sidekiq#redis</code> also accepts a <a href="https://github.com/mperham/connection_pool">ConnectionPool</a>. Here we have full control over how we initialize our redis client. Here&#8217;s how you may initialize Sidekiq with a bunch of <a href="https://github.com/ryanlecompte/redis_failover">RedisFailover</a> clients:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sidekiq</span><span class="o">.</span><span class="n">configure_server</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pool</span> <span class="o">=</span> <span class="no">ConnectionPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zkservers</span> <span class="o">=</span> <span class="s1">&#39;localhost:2181,localhost:2182,localhost:2183&#39;</span>
</span><span class='line'>    <span class="no">RedisFailover</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="n">namespace</span><span class="p">:</span> <span class="s1">&#39;my_service&#39;</span><span class="p">,</span> <span class="n">zkservers</span><span class="p">:</span> <span class="n">zkservers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">pool</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># do the same in Sidekiq.configure_client</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even read Sidekiq&#8217;s <code>concurrency</code> setting and pass it to the connection pool initializer. Now your sidekiq farm doesn&#8217;t care about redis crashes :)</p>

<p>Happy sidekiqing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (un)success story of Colemak]]></title>
    <link href="http://tech.tulentsev.com/2012/11/my-un-success-story-of-colemak/"/>
    <updated>2012-11-18T20:29:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/11/my-un-success-story-of-colemak</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been hearing a lot about <a href="http://colemak.com/">Colemak</a> recently. It&#8217;s a (relatively) new keyboard layout, specially designed for efficient touch typing in English. Any description
of Colemak (including this very post) is accompanied by a story, how QWERTY layout was specifically designed to <em>hinder</em> fast typing, so that typewriter bars don&#8217;t get stuck. Ok, cool story, let&#8217;s try this silver <s>bullet</s> layout.</p>

<p>One of the advertised advantages of this layout is that &#8220;most&#8221; common QWERTY hotkeys are the same. Indeed, such hotkeys as select-all/cut/copy/paste didn&#8217;t move. Yes, this is an advantage for people who copy/paste text all day. But for us, coders, this is really a disadvantage, because some hotkeys are on the same keys, and others have moved. And worst of all, most hotkeys have changed their meaning.</p>

<p>Let me illustrate. Most (all?) browsers in Mac OSX understands the same hotkeys:</p>

<ul>
<li>Cmd-T - open new tab</li>
<li>Cmd-F - find</li>
<li>Cmd-G - find next</li>
<li>Cmd-S - save</li>
</ul>


<p>We&#8217;ve been using these hotkeys for years and now they are burned in our muscle memory. So, with Colemak, when you try to perform an action and you reach for the old key, you get completely different action instead.</p>

<ul>
<li>You tried Cmd-T (qwerty), you hit Cmd-G (colemak), action - &#8220;find next&#8221;</li>
<li>Cmd-F, Cmd-E, &#8220;use selection for find&#8221; (chrome)</li>
<li>Cmd-G, Cmd-D, &#8220;add bookmark&#8221;</li>
<li>Cmd-S, Cmd-R, &#8220;reload&#8221;</li>
</ul>


<p>This is very, VERY frustrating to try search page content and keep adding bookmarks instead. Combine this with a fact that when you switch to a Russian layout, the hotkeys are the same as in QWERTY. So, essentially, you have to learn a whole new set of hotkeys for every program you use and always keep track of the current layout, or otherwise you&#8217;ll get unexpected results.</p>

<p>Now, is it really worth it? Given the fact that programmer&#8217;s productivity is not based on how fast and for how long he can type, I&#8217;d say &#8220;Not really&#8221;. I average 370-450 CPM on QWERTY. This is far more than sufficient for everyday coding needs.</p>

<p>Goodbye, Colemak. Hello again, QWERTY.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talking Capistrano is your friend]]></title>
    <link href="http://tech.tulentsev.com/2012/11/talking-capistrano-is-your-friend/"/>
    <updated>2012-11-12T22:22:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/11/talking-capistrano-is-your-friend</id>
    <content type="html"><![CDATA[<p>I want to share with you a small tweak I came up with a couple of days ago. As some of you
know, Mac OS X includes a ton of very handy utilities. One of them is <code>say</code>. The name is
pretty descriptive, you pass it a string and it voices it, using text-to-speech engine,
that is built in Mac OS. Try it now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>say Hello world!
</span></code></pre></td></tr></table></div></figure>


<p>You can use it anywhere where you can invoke shell commands. Here&#8217;s my capistrano
after-hook, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="sb">`say Sire, our unicorns have been deployed`</span>
</span><span class='line'>  <span class="c1"># note the backticks. This string is roughly equivalent to</span>
</span><span class='line'>  <span class="c1"># system &quot;say Sire, our unicorns have been deployed&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can launch my <code>cap deploy</code> (which can take minute or two) and go read Hacker News or
whatever. I will be told when deploy is finished. I&#8217;m using this for a few days already
and it still make me smile everytime. I should probably come up with more creative messages.</p>

<p>Happy tweaking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty log in Git]]></title>
    <link href="http://tech.tulentsev.com/2012/11/pretty-log-in-git/"/>
    <updated>2012-11-02T17:11:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/11/pretty-log-in-git</id>
    <content type="html"><![CDATA[<p>Here&#8217;s what default <code>git log</code> output looks like</p>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2012/11/git-ugly.png"></p>

<p>While it is sure contains the information and is easily parsable by a machine, it&#8217;s
not the best way to present it to a human. Luckily, the <code>git log</code> commands is quite
customizable. Try this, for example:</p>

<pre><code>git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
</code></pre>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2012/11/git-pretty.png"></p>

<p>You can even set make an alias for it:</p>

<pre><code>git config --global --add alias.plog "log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
</code></pre>

<p>And then you just call</p>

<pre><code>git plog
</code></pre>

<p>Happy gitting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is TextMate 2 ready for everyday coding? Let's find out.]]></title>
    <link href="http://tech.tulentsev.com/2012/10/is-textmate-2-ready-for-everyday-coding-lets-find-out/"/>
    <updated>2012-10-30T03:46:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/10/is-textmate-2-ready-for-everyday-coding-lets-find-out</id>
    <content type="html"><![CDATA[<p>Oh, the TextMate 2 we all waited for so long. Okay, I wasn&#8217;t really waiting,
but I kept hearing about it. Never got to install the app.</p>

<p>So, tonight I wasn&#8217;t able to fall asleep. I opened my macbook and started reading
news. One thing led to another and the next thing I know, I&#8217;m installing alpha
version of TextMate and a bundle for Go. Really, <a href="http://golang.org">Go</a>? I hope
I won&#8217;t be too surprised tomorrow :)</p>

<p>Okay, what&#8217;s new?</p>

<ul>
<li>If you open a file with unknown extension, TextMate will offer to install a
  bundle for it, if there&#8217;s one.</li>
<li>&#8220;Right margin&#8221; is now called &#8220;View -> Show Wrap Column&#8221;</li>
<li>You can specify a default language for new files. 90% of my new files are Ruby
  scripts, so it is a timesaver for me.</li>
<li>New file browser. I&#8217;m not if I like it better or not.</li>
<li>When you click on items in the file browser, they don&#8217;t open automatically. You have to double-click.</li>
<li>Awesome new app icon! :)</li>
</ul>


<p>I will update this post when I find something new.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deferred posting with Octopress]]></title>
    <link href="http://tech.tulentsev.com/2012/10/deferred-posting-with-octopress/"/>
    <updated>2012-10-29T10:42:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/10/deferred-posting-with-octopress</id>
    <content type="html"><![CDATA[<p>One of the powerful things that Wordpress can do and Octopress can&#8217;t, is deferred posting
(or scheduled blogging, whatever). I never really missed it when I was using Wordpress, so
I switched to Octopress without hesitation. But now I could use that feature. In case you
don&#8217;t know, deferred posting allows you to write a post beforehand and schedule its release
to some moment in future.</p>

<p><img class="center" src="http://tech.tulentsev.com/images/uploads/2012/10/wp-datepicker.png"></p>

<p>This functionality is kinda trivial if you use dynamic request processing and a database
(like wordpress does). But with static sites it&#8217;s not at all that easy. So before
implementing something myself, I decided to google for other works on this topic. Here&#8217;s
a good article that I&#8217;ve found: <a href="http://instant-thinking.de/2012/08/03/synced-and-scheduled-blogging-with-octopress/#fnref:3">Synced and scheduled blogging with Octopress</a>.
It also contains some links to other articles.</p>

<p>In short, people write a daemon (or scheduled script) that checks your drafts from time to
time. If a draft is due, it is copied to <code>_posts</code> directory and generate/deploy sequence
is initiated.</p>

<p>This, obviously, requires a computer that is always on and has actual content for the site.
I don&#8217;t really like the idea of a daemon, but, I guess, this is a price you pay for using
&#8220;blog engine for hackers&#8221;.</p>

<p>Could this be implemented as an external web service? Is there an opportunity for a
profitable startup? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic collections a la MongoDB, but with MySQL]]></title>
    <link href="http://tech.tulentsev.com/2012/10/dynamic-collections-a-la-mongodb/"/>
    <updated>2012-10-28T16:52:00+02:00</updated>
    <id>http://tech.tulentsev.com/2012/10/dynamic-collections-a-la-mongodb</id>
    <content type="html"><![CDATA[<p>After having worked with MongoDB for a while, I really miss its dynamic features when
dealing with &#8220;legacy&#8221; systems (MySQL, in this instance). How cool it would be to just start
inserting data into random collection and it will magically appear in the DB? <strong>Good news is</strong>:
it can be done.</p>

<!-- more -->


<p>There are some tradeoffs to be made, however. If we want completely flexible row-per-row
structure, we have to serialize our data into JSON blobs (or whatever). This way we lose
ability to efficiently query the data. Fortunately, in many cases there <em>is</em> a structure in
data, so it can be represented as a MySQL schema.</p>

<p>In this concrete example we are storing event stream. For the ease of management we decided
to split the stream by source app id and date (in this app we don&#8217;t have to query across
several apps or days at the same time). So, our table names should follow this pattern,
where <code>datestr</code> is a date formatted as <code>yyyymmdd</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;</span><span class="si">#{</span><span class="n">app_id</span><span class="si">}</span><span class="s2">_daily_events_</span><span class="si">#{</span><span class="n">datestr</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, how do we do it? We utilize <a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html">API for schema manipulations</a>,
which is conveniently provided to us by ActiveRecord. We are interested in the <a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table">create_table</a> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create_table() passes a TableDefinition object to the block.</span>
</span><span class='line'><span class="c1"># This form will not only create the table, but also columns for the</span>
</span><span class='line'><span class="c1"># table.</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_table</span><span class="p">(</span><span class="ss">:suppliers</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">60</span>
</span><span class='line'>  <span class="c1"># Other fields here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how our method definition might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Calculates and sets current table name, based on passed parameters. Example:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   SqlDailyEvents.use_table_for_app 62, Time.now</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># @param aid Application ID</span>
</span><span class='line'><span class="c1"># @param date [Time] Time of event</span>
</span><span class='line'><span class="c1"># @return [String] Calculated table name</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">use_table_for_app</span> <span class="n">aid</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">make_table_name</span><span class="p">(</span><span class="n">aid</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">table_exists?</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">create_table</span> <span class="nb">name</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:event_id</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:event_value</span><span class="p">,</span> <span class="ss">:integer</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">30</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">clear_cache!</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table_name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">make_table_name</span> <span class="n">app_id</span><span class="p">,</span> <span class="n">event_date</span>
</span><span class='line'>  <span class="n">datestr</span> <span class="o">=</span> <span class="n">event_date</span><span class="o">.</span><span class="n">strftime</span> <span class="s1">&#39;%Y%m%d&#39;</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app_id</span><span class="si">}</span><span class="s2">_daily_events_</span><span class="si">#{</span><span class="n">datestr</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>clear_cache!</code> call. We need to invalidate ActiveRecord&#8217;s internal caches, or
otherwise it won&#8217;t know about our newly created table until app is restarted. Writing a
reverse method is pretty straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Drops corresponding table</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># @param aid Application ID</span>
</span><span class='line'><span class="c1"># @param date [Time] Time for which table should be dropped</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">forget_table_for_app</span> <span class="n">aid</span><span class="p">,</span> <span class="n">date</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">make_table_name</span><span class="p">(</span><span class="n">aid</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">table_exists?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="n">drop_table</span> <span class="nb">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">clear_cache!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is how you use the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SqlDailyEvents</span><span class="o">.</span><span class="n">use_table_for_app</span> <span class="n">aid</span><span class="p">,</span> <span class="n">cur_time</span>
</span><span class='line'>
</span><span class='line'><span class="no">SqlDailyEvents</span><span class="o">.</span><span class="n">create</span> <span class="n">event_id</span><span class="p">:</span> <span class="n">evid</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">event_value</span><span class="p">:</span> <span class="n">evval</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">user_id</span><span class="p">:</span> <span class="n">uid</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, prefix every <code>create</code> call with a <code>use_table_for_app</code> call, so that current
table is properly set and created (if needed). I admit, this is still far from being
completely transparent, but this works for me at the moment. Feedback is welcome!</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object extensions and method lookups in Ruby]]></title>
    <link href="http://tech.tulentsev.com/2012/10/object-extensions-and-method-lookups-in-ruby/"/>
    <updated>2012-10-21T16:30:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/10/object-extensions-and-method-lookups-in-ruby</id>
    <content type="html"><![CDATA[<p>Method lookup is an interesting topic in Ruby. For example, exactly what happens that
produces this output from this code?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Foo</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bar</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'><span class="c1"># &gt;&gt; foo</span>
</span><span class='line'><span class="c1"># &gt;&gt; bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>The algorithm for method lookups can be summarized in one sentence: &#8220;one step to the right,
then up&#8221;. This is referring a specific visualization of objects and classes relationships,
where we place object&#8217;s class to the right from the object, and place ancestor of a class
above it.</p>

<!-- more -->


<p><img src="http://tech.tulentsev.com/images/uploads/2012/10/lookup1.png"></p>

<p>It&#8217;s important to understand that instances in ruby do not hold methods, only classes do.
At the same time we&#8217;re able to enhance <strong>specific instances</strong> with additional methods, that
other instances of the same class will not have. Look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>    <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar1</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bar1</span><span class="o">.</span><span class="n">extend</span> <span class="no">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar2</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar1</span><span class="o">.</span><span class="n">ancestors</span> <span class="c1">#</span>
</span><span class='line'><span class="n">bar1</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># =&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="n">bar2</span><span class="o">.</span><span class="n">hello</span> <span class="c1"># ~&gt; -:17:in `&lt;main&gt;&#39;: undefined method `hello&#39; for #&lt;Bar:0x007f858210a1d0&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>bar2</code> instance does not have a <code>hello</code> method, while <code>bar1</code> does have it. This means
that <code>hello</code> method can&#8217;t be in <code>bar1</code> instance itself (remember, instances don&#8217;t contain
methods), but it also can&#8217;t be in <code>Bar</code> class, because then <code>bar2</code> would also have it. So,
where is that method located?</p>

<p>Well, there is a special hidden class for every object <em>instance</em> in ruby. This dynamic
class is where all those per-instance methods go. You won&#8217;t be able to see it in the
ancestors chain, ruby hides it from you. But it&#8217;s there (well, technically speaking, it <em>appears</em> there when you define your first per-instance method). So, in this case the lookup goes
like this:</p>

<p><img src="http://tech.tulentsev.com/images/uploads/2012/10/lookup2.png"></p>

<p>But what happens if <code>Bar</code> also defines a <code>hello</code> method? Which gets found and executed first?
Can you tell by looking on the pictures above?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">if</span> <span class="n">defined?</span> <span class="k">super</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar1</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bar1</span><span class="o">.</span><span class="n">extend</span> <span class="no">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar1</span><span class="o">.</span><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s right it will print &#8220;bar&#8221;, then &#8220;foo&#8221;. Why? Because <code>Foo#hello</code> will be injected
<em>before</em> <code>Bar#hello</code> in the ancestors chain. It will go into that dynamic unique class
(which is called <em>eigenclass</em>, by the way). Here&#8217;s the lookup flow:</p>

<p><img src="http://tech.tulentsev.com/images/uploads/2012/10/lookup3.png"></p>

<p>Method from <code>Foo</code> is found first and it calls super, which is the version in <code>Bar</code> class.
This version also tries to call <code>super</code> (there isn&#8217;t one), then prints &#8220;bar&#8221; and returns
control to <code>Foo#hello</code> which prints &#8220;foo&#8221;.</p>

<p>Now you see, it&#8217;s a simple algorithm. But it can be really puzzling if you don&#8217;t know about
eigenclasses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY: funnel chart]]></title>
    <link href="http://tech.tulentsev.com/2012/10/diy-funnel-chart-with-highcharts-dot-js/"/>
    <updated>2012-10-20T20:02:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/10/diy-funnel-chart-with-highcharts-dot-js</id>
    <content type="html"><![CDATA[<p>Recently I came across this excellent way of visualizing a funnel. It&#8217;s simple, informative
and it doesn&#8217;t look like a freaking funnel (with neck and all).</p>

<p><img src="http://tech.tulentsev.com/images/uploads/2012/10/funnel1.png"></p>

<p><a href="http://chart.apis.google.com/chart?cht=bhs&amp;chco=ffffff,FF9900&amp;chxt=x,x,y&amp;chxl=1%3a|Percentage%20converting|2%3a|Step%206|Step%205|Step%204|Step%203|Step%202|Step%201&amp;chxp=1,50|3,50&amp;chd=t:0,12.5,28,29,35.5,48.5|100,75,44,42,29,3&amp;chbh=a&amp;chs=800x230&amp;chm=N%2a%2a%,000000,1,-1,11,,c&amp;chds=0,100">link to source</a></p>

<p>The only negative property of it is that it&#8217;s implemented with Google Charts API. Sure,
it&#8217;s free and pretty, but it&#8217;s also an external service call and a dependency. Today I&#8217;ll
show you how to make this kind of charts yourself in your charting library (I&#8217;ll be using
<a href="http://highcharts.com">highcharts.js</a>).</p>

<!-- more -->


<p>This can be done with any charting library that supports stacked bar charts. Because that&#8217;s
what it is, a stacked bar. The trick is that one of the stack parts is invisible and serves
as a padding. Look:</p>

<p><img src="http://tech.tulentsev.com/images/uploads/2012/10/funnel2.png">
<a href="http://chart.apis.google.com/chart?cht=bhs&amp;chco=0000ff,FF9900&amp;chxt=x,x,y&amp;chxl=1%3a|Percentage%20converting|2%3a|Step%206|Step%205|Step%204|Step%203|Step%202|Step%201&amp;chxp=1,50|3,50&amp;chd=t:0,12.5,28,29,35.5,48.5|100,75,44,42,29,3&amp;chbh=a&amp;chs=800x230&amp;chm=N%2a%2a%,000000,1,-1,11,,c&amp;chds=0,100">link to source</a></p>

<p>You see, the basic idea is pretty simple. The only hard part is to translate into series
of commands to your charting lib. I have made a small function for myself that does creates
a series for highcharts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">makeSeriesConfig</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we need max value to calculate padding correctly</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">max_value</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">max_value</span> <span class="o">||</span> <span class="nx">max_value</span> <span class="o">&lt;</span> <span class="nx">v</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">max_value</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">padding</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;padding&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dataLabels</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">enabled</span><span class="o">:</span> <span class="kc">false</span> <span class="c1">// don&#39;t show labels for padding</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">[]</span> <span class="c1">// will fill later</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">centralPiece</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Value&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">[],</span> <span class="c1">// will fill later</span>
</span><span class='line'>        <span class="nx">dataLabels</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">enabled</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="p">(</span><span class="nx">max_value</span> <span class="o">-</span> <span class="nx">v</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">padding</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">y</span><span class="o">:</span> <span class="nx">w</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span> <span class="c1">// background color</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">centralPiece</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">y</span><span class="o">:</span> <span class="nx">v</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="nx">v</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">centralPiece</span><span class="p">,</span> <span class="nx">padding</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later we use this function in a chart definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">chart</span><span class="p">;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">chart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Highcharts</span><span class="p">.</span><span class="nx">Chart</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">chart</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">renderTo</span><span class="o">:</span> <span class="s1">&#39;container&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">// ... other options go here ...</span>
</span><span class='line'>        <span class="nx">series</span><span class="o">:</span> <span class="nx">makeSeriesConfig</span><span class="p">([</span>
</span><span class='line'>                                    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Step 1&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">300</span><span class="p">},</span>
</span><span class='line'>                                    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Step 2&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">240</span><span class="p">},</span>
</span><span class='line'>                                    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Step 3&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">70</span><span class="p">},</span>
</span><span class='line'>                                    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Step 4&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">40</span><span class="p">},</span>
</span><span class='line'>                                    <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Step 5&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">10</span><span class="p">}</span>
</span><span class='line'>                                <span class="p">])</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s my final result which I&#8217;m happy with and which is going from proof-of-concept to
active development.</p>

<h2>Final result</h2>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/4fpua/embedded/js,resources,html,css,result/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby gem for MurmurHash 3]]></title>
    <link href="http://tech.tulentsev.com/2012/10/ruby-gem-for-murmurhash-3/"/>
    <updated>2012-10-16T20:44:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/10/ruby-gem-for-murmurhash-3</id>
    <content type="html"><![CDATA[<p>Still driven by <a href="http://tech.tulentsev.com/2012/10/probabilistic-sets-in-redis/">that post</a>,
I decided to do something about it. So I went and tried to read the original paper. It was
mind blowing. Not because it was great (I am sure it is), but because it&#8217;s been a while
since I had to read some serious math.</p>

<p>Then I came across this article, which could also be named &#8220;HyperLogLog for dummies&#8221;:
<a href="http://metamarkets.com/2012/fast-cheap-and-98-right-cardinality-estimation-for-big-data/">Fast, Cheap, and 98% Right: Cardinality Estimation for Big Data</a>.
It was much more readable. From it I learned about Murmur hash and was surprised that
there&#8217;s no ruby gem for this. Fortunately, <a href="http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp">C++ source code</a>
was available, so I decided to wrap this as a gem.</p>

<p>It went much smoother than I anticipated and I had working version within 3 or 4 hours.
I didn&#8217;t have experience with native extensions before, someone experienced probably could
have done it in 5 minutes, but still I consider this as an achievement! :)</p>

<p>So, only when I tried to push the gem to <a href="http://rubygems.org">RubyGems</a>, I discovered that there IS
a gem with this name: <a href="http://rubygems.org/gems/murmurhash3">murmurhash3</a>. The public API
is too cumbersome if you ask me, but it works and probably has less bugs than my version.</p>

<p>Here&#8217;s how you use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;murmurhash3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;Hello, world!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ints</span> <span class="o">=</span> <span class="no">MurmurHash3</span><span class="o">::</span><span class="no">Native128</span><span class="o">.</span><span class="n">murmur3_128_str_hash</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">#    produce a 128 bits of hash, in the form of 4 32-bit integers</span>
</span><span class='line'><span class="n">ints</span> <span class="c1"># =&gt; [3537266143, 4048629201, 2834548068, 741500496]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can turn this array of integers into a hex string like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ints</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;L*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;H*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="c1"># =&gt; &quot;df65d6d2d12d51f164c5f3a85066322c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know a better/faster/more idiomatic way, please let me know :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Probabilistic sets in Redis (almost magic)]]></title>
    <link href="http://tech.tulentsev.com/2012/10/probabilistic-sets-in-redis/"/>
    <updated>2012-10-16T00:18:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/10/probabilistic-sets-in-redis</id>
    <content type="html"><![CDATA[<p>A very interesting topic was posted today in Redis google group, called
<a href="https://groups.google.com/forum/#!msg/redis-db/8Zt_6hJo09k/FJCnrr9OSikJ">&#8220;Set Sketch Implementation&#8221;</a>.</p>

<blockquote><p>One nice application of set sketches is efficient storage and retrieval of analytics-type data: if you want to count the number of distinct users who have performed specific actions in your system (&#8220;visited page X&#8221;, &#8220;pressed button Y&#8221;, &#8220;followed user Z&#8221;, etc.) you&#8217;re quickly overwhelmed with the amount of memory needed to store even bit vectors representing all events for all users. Bloom counters are sometimes used for this sort of thing, but they still require a significant investment in space and the results of individual counters can&#8217;t be easily/efficiently combined.</p>

<p>HyperLogLog is a good alternative when you don&#8217;t need exact counts: with a small, fixed amount of space per counter, it can yield good estimates of set cardinality - usually to within 2% of the actual count. In addition, the counters can be combined and queried at little extra cost, so that you can compute estimates to queries like &#8220;how many users visited page X and pressed button Y&#8221; or &#8220;how many users follow either user W or user Z&#8221; in real time. All of the operations take O(1) time and space in the cardinality of the sets being represented. Adding an element to a set sketch is particularly fast, essentially just the cost of applying a hash function to the element.</p></blockquote>

<p>Now that I know about this technology, I desperately want it. I could really use that
because my current app has a lot of sets, and some of them can get pretty large. Being
able to use constant size is a huge relief, because you can correctly estimate amount of
memory taken by Redis. And being able to combine them (UNION/INTER) is priceless.</p>

<p>The only thing that is not clear to me is how this will play along with upcoming Redis Cluster.
Single key operations are OK, of course, but what about multiple key ops?</p>

<p>I really hope that Salvatore will not reject this functionality :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[resque-multi-job-forks is finally updated]]></title>
    <link href="http://tech.tulentsev.com/2012/09/resque-multi-job-forks-is-finally-updated/"/>
    <updated>2012-09-16T09:00:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/09/resque-multi-job-forks-is-finally-updated</id>
    <content type="html"><![CDATA[<p>I was using <a href="https://github.com/staugaard/resque-multi-job-forks/">resque-multi-job-forks</a>
plugin for quite a some time. What was bugging me is that the project seemed to be abandoned.
There were no new commits for 2 years. And current version of the gem had dependency on an
archaic version of Resque. So, I forked, bumped the dependency and bundled the gem. But
then I thought: &#8220;Hey, why not share it with people?&#8221; I exchanged a couple of emails with
the owner and now I am the official owner/maintainer of said gem. This is my first
takeover, hooray! :)</p>

<p>To celebrate this, today I have released version v0.3.2, which includes updated <code>resque</code>
dependency and fix for the problem when workers disappeared from resque-web after the first
fork has reached its limit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from Wordpress to Octopress - 301 redirects]]></title>
    <link href="http://tech.tulentsev.com/2012/09/migrating-from-wordpress-to-octopress-301-redirects/"/>
    <updated>2012-09-03T17:00:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/09/migrating-from-wordpress-to-octopress-301-redirects</id>
    <content type="html"><![CDATA[<p>Okay, I probably can&#8217;t avoid writing the obligatory migration article :) If in the
migration process you decided to also change the domain name, then this article is for you.
If your domain name is the same, only the hosting is different, then you should set up a
<a href="http://octopress.org/docs/deploying/github/">CNAME</a>. If you wiped Wordpress and installed
Octopress in its stead, then this article is useless to you, move on.</p>

<!-- more -->


<p>We want to set up a good 301 redirect, such that will take links to old blog posts and
redirect them to corresponding posts on the new domain. Redirection is good. It keeps
search visitors happy (bots or humans).</p>

<p>We can implement it using <code>mod_rewrite</code>. Wordpress already requires <code>mod_rewrite</code>, so
we can count on its presence. Navigate to blog&#8217;s root and look for file named <code>.htaccess</code>.
It should have this (or similar) content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># BEGIN WordPress
</span><span class='line'>&lt;IfModule mod_rewrite.c>
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteBase /blog/
</span><span class='line'>RewriteRule ^index\.php$ - [L]
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-f
</span><span class='line'>RewriteCond %{REQUEST_FILENAME} !-d
</span><span class='line'>RewriteRule . /blog/index.php [L]
</span><span class='line'>&lt;/IfModule>
</span><span class='line'>
</span><span class='line'># END WordPress</span></code></pre></td></tr></table></div></figure>


<p>We don&#8217;t need all this, because we won&#8217;t be using Wordpress anymore. Replace it with this
snippet</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;IfModule mod_rewrite.c>
</span><span class='line'>Options +FollowSymlinks
</span><span class='line'>RewriteEngine On
</span><span class='line'>RewriteCond %{HTTP_HOST} ^example.com [NC]
</span><span class='line'>RewriteRule ^(.*)$ http://blog.example2.com/$1 [L,R=301]
</span><span class='line'>
</span><span class='line'>RewriteCond %{HTTP_HOST} ^www.example.com [NC]
</span><span class='line'>RewriteRule ^(.*)$ http://blog.example2.com/$1 [L,R=301]
</span><span class='line'>&lt;/IfModule></span></code></pre></td></tr></table></div></figure>


<p>In short, these two rules take any URL from the old domain (with or without <code>www</code>) and
replace domain name to a new one.</p>

<p>If your octopress blog is functioning on the new domain, no more actions are required. It
should work already.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to automatically open new octopress post in editor?]]></title>
    <link href="http://tech.tulentsev.com/2012/09/how-to-automatically-open-new-post-in-editor/"/>
    <updated>2012-09-03T15:51:00+03:00</updated>
    <id>http://tech.tulentsev.com/2012/09/how-to-automatically-open-new-post-in-editor</id>
    <content type="html"><![CDATA[<p>Recently I discovered <a href="http://octopress.org">Octopress</a> and instead of writing another
article on how to migrate to it from Wordpress, I decided to do something else. And,
fortunately enough, the topic presented itself. :)</p>

<p>So, Octopress is not your conventional blog engine. You create new posts by running
a command in the terminal. I&#8217;m quite comfortable with creating new posts with a rake task.
What I didn&#8217;t like is that I needed to run another command to actually open the post in my
editor. Here&#8217;s my fix to that. It patches the <code>new_post</code> command, by adding new optional
parameter to it, <code>:open_in_editor</code>. If you pass <code>true</code> (or other truthy value),
then the post will be opened in
my default <code>$EDITOR</code> (which is TextMate at this moment).
Now the creation of new post can look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;How to automatically open new post in editor?&#39;</span>,:open<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>And, finally, the diff of this change:</p>

<figure class='code'><figcaption><span>Diff </span><a href='http://pastie.org/pastes/4825151/text?key=qxucmagulrlugkhkyogkg'>Download this snippet </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Rakefile b/Rakefile</span>
</span><span class='line'><span class="gh">index 58e1925..df8ff7e 100644</span>
</span><span class='line'><span class="gd">--- a/Rakefile</span>
</span><span class='line'><span class="gi">+++ b/Rakefile</span>
</span><span class='line'><span class="gu">@@ -90,10 +90,10 @@ end</span>
</span><span class='line'>
</span><span class='line'> # usage rake new_post[my-new-post] or rake new_post[&#39;my new post&#39;] or rake new_post (defaults to &quot;new-post&quot;)
</span><span class='line'> desc &quot;Begin a new post in #{source_dir}/#{posts_dir}&quot;
</span><span class='line'><span class="gd">-task :new_post, :title do |t, args|</span>
</span><span class='line'><span class="gi">+task :new_post, :title, :open_in_editor do |t, args|</span>
</span><span class='line'>   raise &quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot; unless File.directory?(source_dir)
</span><span class='line'>   mkdir_p &quot;#{source_dir}/#{posts_dir}&quot;
</span><span class='line'><span class="gd">-  args.with_defaults(:title =&gt; &#39;new-post&#39;)</span>
</span><span class='line'><span class="gi">+  args.with_defaults(:title =&gt; &#39;new-post&#39;, :open_in_editor =&gt; false)</span>
</span><span class='line'>   title = args.title
</span><span class='line'>   filename = &quot;#{source_dir}/#{posts_dir}/#{Time.now.strftime(&#39;%Y-%m-%d&#39;)}-#{title.to_url}.#{new_post_ext}&quot;
</span><span class='line'>   if File.exist?(filename)
</span><span class='line'><span class="gu">@@ -109,6 +109,9 @@ task :new_post, :title do |t, args|</span>
</span><span class='line'>     post.puts &quot;categories: &quot;
</span><span class='line'>     post.puts &quot;---&quot;
</span><span class='line'>   end
</span><span class='line'><span class="gi">+  if args[:open_in_editor]</span>
</span><span class='line'><span class="gi">+    `$EDITOR #{filename}`</span>
</span><span class='line'><span class="gi">+  end</span>
</span><span class='line'> end
</span><span class='line'>
</span><span class='line'> # usage rake new_page[my-new-page] or rake new_page[my-new-page.html] or rake new_page (defaults to &quot;new-page.markdown&quot;)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
